(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{424:function(s,a,t){"use strict";t.r(a);var e=t(7),n=Object(e.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据类型"}},[s._v("#")]),s._v(" 数据类型")]),s._v(" "),a("h3",{attrs:{id:"概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("ul",[a("li",[s._v("原始类型（primitive type）\n"),a("ul",[a("li",[s._v("数值（number）：整数和小数")]),s._v(" "),a("li",[s._v("字符串（string）")]),s._v(" "),a("li",[s._v("布尔值")])])]),s._v(" "),a("li",[s._v("合成类型（complex type）\n"),a("ul",[a("li",[s._v("对象（object）：分为狭义对象（object）、数组（array）、函数（function）")])])]),s._v(" "),a("li",[s._v("特殊值\n"),a("ul",[a("li",[s._v("undefined：未定义")]),s._v(" "),a("li",[s._v("null：空值")])])])]),s._v(" "),a("p",[s._v("undefined是本来该有值的地方你没设值，是一种异常情况，所以它返回数值时是NAN.")]),s._v(" "),a("p",[s._v("null表示一个变量明确的被赋值成空值，所以返回0.")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://s1.imagehub.cc/images/2024/11/26/dc2e652270ff212c11bc8920c0e9888f.png",alt:"image 20240704000906973"}}),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://s1.imagehub.cc/images/2024/11/26/9456b2965a159f65a321d46356f07892.png",alt:"image 20240704000924125"}}),s._v(" "),a("p",[s._v("1.类型")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("typeof undefined")]),s._v("返回"),a("code",[s._v('"undefined"')]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v("typeof null")]),s._v("返回"),a("code",[s._v('"object"')]),s._v("（这是一个历史遗留问题，实际上"),a("code",[s._v("null")]),s._v("并不是一个对象）。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('javascript复制代码console.log(typeof undefined); // 输出："undefined"\nconsole.log(typeof null); // 输出："object"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("blockquote",[a("p",[s._v("因为一开始公司设置的数据类型只有对象、整数、浮点数、字符串和布尔值。只把null当做特殊对象，所以typeof null返回object。null,后来"),a("code",[s._v("null")]),s._v("独立出来，作为一种单独的数据类型，为了兼容以前的代码，"),a("code",[s._v("typeof null")]),s._v("返回"),a("code",[s._v("object")]),s._v("就没法改变了。")])]),s._v(" "),a("p",[s._v("2.相等性")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("undefined == null")]),s._v("返回"),a("code",[s._v("true")]),s._v("，因为它们都被认为是空值。")]),s._v(" "),a("li",[a("code",[s._v("undefined === null")]),s._v("返回"),a("code",[s._v("false")]),s._v("，因为它们类型不同。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("javascript复制代码console.log(undefined == null); // 输出：true\nconsole.log(undefined === null); // 输出：false\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("总结：undefined表示变量未赋值或未定义")]),s._v(" "),a("p",[s._v("null表示变量明确被赋值为空。")]),s._v(" "),a("hr"),s._v(" "),a("h2",{attrs:{id:"mdn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mdn"}},[s._v("#")]),s._v(" MDN")]),s._v(" "),a("h3",{attrs:{id:"杂】"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#杂】"}},[s._v("#")]),s._v(" 杂】")]),s._v(" "),a("h3",[s._v("箭头函数")]),s._v(" "),a("p",[s._v("在 JavaScript 中，"),a("code",[s._v("() => {}")]),s._v(" 是箭头函数（arrow function）语法的一部分。箭头函数是 ES6（ECMAScript 2015）引入的一种新的函数定义方式，提供了一种更简洁的函数表达法，特别是对于简短的函数。")]),s._v(" "),a("p",[s._v("具体来说，"),a("code",[s._v("() => {}")]),s._v(" 的含义如下：")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[a("code",[s._v("()")])]),s._v(": 参数列表，表示函数的参数。如果函数没有参数，可以写成空的圆括号。如果有一个参数，可以省略圆括号。例如，"),a("code",[s._v("x => x * x")]),s._v(" 是一个接受一个参数 "),a("code",[s._v("x")]),s._v(" 的箭头函数。如果有多个参数，参数需要用圆括号包起来，如 "),a("code",[s._v("(a, b) => a + b")]),s._v("。")])]),s._v(" "),a("li",[a("p",[a("strong",[a("code",[s._v("=>")])]),s._v(": 箭头符号，表示这是一个箭头函数。")])]),s._v(" "),a("li",[a("p",[a("strong",[a("code",[s._v("{}")])]),s._v(": 函数体，包含需要执行的代码。如果函数体只有一个表达式，并且这个表达式会作为返回值返回，则可以省略大括号和 "),a("code",[s._v("return")]),s._v(" 关键字。例如，"),a("code",[s._v("x => x * x")]),s._v(" 是一个返回 "),a("code",[s._v("x")]),s._v(" 的平方的箭头函数。")])])]),s._v(" "),a("p",[s._v("箭头函数与传统函数（使用 "),a("code",[s._v("function")]),s._v(" 关键字定义的函数）有一些重要的区别：")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("语法简洁")]),s._v(": 箭头函数写起来通常比传统函数更简洁。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("词法上的 "),a("code",[s._v("this")]),s._v(" 绑定")]),s._v(": 箭头函数没有自己的 "),a("code",[s._v("this")]),s._v(" 值，它会捕获上下文中 "),a("code",[s._v("this")]),s._v(" 的值。这意味着箭头函数中的 "),a("code",[s._v("this")]),s._v(" 会和箭头函数定义时的上下文的 "),a("code",[s._v("this")]),s._v(" 保持一致。这对于在回调函数中使用 "),a("code",[s._v("this")]),s._v(" 特别有用。")])])]),s._v(" "),a("p",[s._v("例子：")]),s._v(" "),a("p",[s._v("传统函数：")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("箭头函数：")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("sum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 进一步简化")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("sum")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("箭头函数在回调中的使用：")]),s._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" numbers "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用传统函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" doubled1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 使用箭头函数")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" doubled2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" numbers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("map")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("number")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("总之，箭头函数为编写更简洁、更直观的代码提供了便利，尤其在处理回调函数或嵌套函数时非常有用。")]),s._v(" "),a("h2",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[s._v("#")]),s._v(" ------------------------")]),s._v(" "),a("h2",{attrs:{id:"js第一步🦘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js第一步🦘"}},[s._v("#")]),s._v(" JS第一步🦘")]),s._v(" "),a("h3",[s._v("什么是JS")]),s._v(" "),a("p",[s._v("JS是一种脚本编程语言，可以让网页提供实时内容更新。")]),s._v(" "),a("p",[a("strong",[s._v("API分类")])]),s._v(" "),a("p",[s._v("全称是Application Programming Interface.应用程序接口")]),s._v(" "),a("p",[s._v("分为3rd party APIs,Browser APIs")]),s._v(" "),a("p",[s._v("有以下几种常用API")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://s1.imagehub.cc/images/2024/11/26/35a9386743a759b8cfdde35133c24861.png",alt:"image 20240706170906007"}}),s._v(" "),a("p",[a("strong",[s._v("JS用途")])]),s._v(" "),a("p",[s._v("常见用途是按照文档对象模型API动态修改HTML，CSS")]),s._v(" "),a("p",[a("strong",[s._v("内部JS")])]),s._v(" "),a("p",[s._v("就是在html文件中添加< script>blablablabla< /script>。 bla就是js语言")]),s._v(" "),a("p",[a("strong",[s._v("外部JS")])]),s._v(" "),a("p",[s._v('在html文件中引用外部文件。< script src="script.js" defer>< /script>')]),s._v(" "),a("p",[a("strong",[s._v("内联JS")])]),s._v(" "),a("p",[s._v("直接在html的标签中添加事件处理。")]),s._v(" "),a("hr"),s._v(" "),a("p",[a("strong",[s._v("常见定义解释")])]),s._v(" "),a("ul",[a("li",[s._v("解释&编译：分别是interpret,compile.先解释编译，编译型语言是说代码要转化成另一种形式才能运行。比如C和C++先要编译成机器码，然后才能由计算机运行。解释型语言是说，代码自上而下运行，且"),a("strong",[s._v("实时返回运行结果")]),s._v("。")]),s._v(" "),a("li",[a("code",[s._v('监听控件.addEventListener("监听事件"，“处理器”)')]),s._v("：监听控件发生的事件并分配处理器")])]),s._v(" "),a("p",[a("strong",[s._v("脚本阻塞")])]),s._v(" "),a("p",[s._v("由于HTML是自上而下运行，所以有时候遇见js了就不往下运行了，这时候常用defer，不过是外部js的时候。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("DOMContentLoaded")]),s._v(" 事件，表示HTML 文档体完全加载和解析。（一般用在html加载完毕再运行js的时候）")]),s._v(" "),a("li",[a("code",[s._v("defer")]),s._v('：（仅对外部脚本有效，而且通常是放到< head>标签中）常见于< script src="script.js" defer>< /script>。defer告知浏览器在遇到 '),a("code",[s._v("<script>")]),s._v(" 元素时先把HTML 内容解析完以后再执行js脚本，而不是遇见脚本就立即执行。（适用于脚本中有很多DOM的情况）有助于减缓阻塞。（defer的翻译是推迟，延缓）")]),s._v(" "),a("li",[a("code",[s._v("async")]),s._v("：脚本下载完就立即执行。也就是可能会边解析HTML文档边解析脚本。")]),s._v(" "),a("li",[s._v("如果你直接把js脚本文件放在HTML代码底端，那上面的都是浮云，完全不需要使用了，因为计算机直接运行完上面的再运行js。")])]),s._v(" "),a("h2",{attrs:{id:"循环-条件语句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环-条件语句"}},[s._v("#")]),s._v(" 循环&条件语句")]),s._v(" "),a("p",[a("code",[s._v("for...of")]),s._v(" 循环为你提供了一种获取数组中的每一个元素的方法")]),s._v(" "),a("p",[s._v("例子")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const fruits = ["apples", "bananas", "cherries"];\nfor (const fruit of fruits) {\n  console.log(fruit);\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("code",[s._v("for (const fruit of fruits)")]),s._v(" 这一行的意思是：")]),s._v(" "),a("ol",[a("li",[s._v("把 "),a("code",[s._v("fruits")]),s._v(" 中的第一个元素设置成"),a("code",[s._v("fruit")]),s._v("。")]),s._v(" "),a("li",[s._v("运行"),a("code",[s._v("{}")]),s._v(" 。")]),s._v(" "),a("li",[s._v("获取 "),a("code",[s._v("fruits")]),s._v("中的下一个元素，重复步骤 2，直至到达 "),a("code",[s._v("fruits")]),s._v(" 的末尾。")])]),s._v(" "),a("hr"),s._v(" "),a("p",[a("strong",[s._v("循环")])]),s._v(" "),a("p",[s._v("循环并不难，但是在一些算法题目中容易绕进去，希望你冷静思考，不要妄自菲薄，熟练度上来以后会好很多。")]),s._v(" "),a("p",[s._v("while(\t){\t}")]),s._v(" "),a("p",[s._v("do{\t}while(\t)")]),s._v(" "),a("p",[s._v("--")]),s._v(" "),a("p",[s._v("break 跳出循环（只跳出最近的一层循环）")]),s._v(" "),a("p",[s._v("continue 跳出迭代 （跳出最近一层）")]),s._v(" "),a("p",[a("strong",[s._v("条件")])]),s._v(" "),a("p",[s._v("if(\t)else{\t}")]),s._v(" "),a("p",[s._v("if(\t){\t}else if(\t){\t}else{\t}")]),s._v(" "),a("h2",{attrs:{id:"变量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#变量"}},[s._v("#")]),s._v(" 变量")]),s._v(" "),a("p",[s._v("变量可以存储任何东西，比如变量可以存储数值。但是变量不是数值本身，变量只是装数值的容器。")]),s._v(" "),a("p",[s._v("声明一个变量的语法是在 "),a("code",[s._v("var")]),s._v(" 或 "),a("code",[s._v("let")]),s._v(" 关键字之后加上这个变量的名字、")]),s._v(" "),a("h5",[s._v("变量提升")]),s._v(" "),a("p",[s._v("指的是你可以先用这个变量，在后面再声明它。")]),s._v(" "),a("p",[s._v('name="chris";  var name;')]),s._v(" "),a("p",[s._v('不过这样写是错误的，var myName = "Chris"; var myName = "Bob";')]),s._v(" "),a("h5",[s._v("变量命名规则")]),s._v(" "),a("p",[s._v("你应当坚持使用拉丁字符 (0-9,a-z,A-Z) 和下划线字符。")]),s._v(" "),a("ul",[a("li",[s._v("变量名不要以下划线开头——以下划线开头的被某些 JavaScript 设计为特殊的含义，因此可能让人迷惑。")]),s._v(" "),a("li",[s._v("变量名不要以数字开头。这种行为是不被允许的，并且将引发一个错误。")]),s._v(" "),a("li",[s._v("一个可靠的命名约定叫做 "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms",target:"_blank",rel:"noopener noreferrer"}},[s._v('"小写驼峰命名法"'),a("OutboundLink")],1),s._v("，用来将多个单词组在一起，小写整个命名的第一个字母然后大写剩下单词的首字符。我们已经在文章中使用了这种命名方法。")]),s._v(" "),a("li",[s._v("让变量名直观，它们描述了所包含的数据。不要只使用单一的字母/数字，或者长句。")]),s._v(" "),a("li",[s._v("变量名大小写敏感——因此"),a("code",[s._v("myage")]),s._v("与"),a("code",[s._v("myAge")]),s._v("是 2 个不同的变量。")]),s._v(" "),a("li",[s._v("最后也是最重要的一点——你应当避免使用 JavaScript 的保留字给变量命名。保留字，即是组成 JavaScript 的实际语法的单词！因此诸如 "),a("code",[s._v("var")]),s._v("、"),a("code",[s._v("function")]),s._v("、"),a("code",[s._v("let")]),s._v(" 和 "),a("code",[s._v("for")]),s._v(" 等，都不能被作为变量名使用。浏览器将把它们识别为不同的代码项，因此你将得到错误。")])]),s._v(" "),a("h5",[s._v("动态类型")]),s._v(" "),a("p",[s._v("JavaScript 是一种“动态类型语言”，这意味着不同于其他一些语言 (译者注：如 C、JAVA)，你不需要指定变量将包含什么数据类型（例如 number 或 string）。")]),s._v(" "),a("p",[s._v('let myString = "Hello";')]),s._v(" "),a("h2",{attrs:{id:"文本处理-字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#文本处理-字符串"}},[s._v("#")]),s._v(" 文本处理 字符串")]),s._v(" "),a("p",[s._v("在 JavaScript 中，你可以选择单引号（"),a("code",[s._v("'")]),s._v("）、双引号（"),a("code",[s._v('"')]),s._v("）或反引号（```）来包裹字符串。")]),s._v(" "),a("p",[s._v("字符串的开头和结尾必须使用相同的字符，否则会出现错误。")]),s._v(" "),a("h5",[s._v("模板字面量")]),s._v(" "),a("p",[s._v("使用反引号声明的字符串是一种特殊字符串，被称为"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Template_literals",target:"_blank",rel:"noopener noreferrer"}},[a("em",[s._v("模板字面量")]),a("OutboundLink")],1),s._v("。在大多数情况下，模板字面量与普通字符串类似，但它具有一些特殊的属性。")]),s._v(" "),a("p",[s._v("在模板字面量中，你可以在 "),a("code",[s._v("${ }")]),s._v(" 中包装 JavaScript 变量或表达式，其结果将被包含在字符串中：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const name = "克里斯";\nconst greeting = `你好，${name}`;\nconsole.log(greeting); // "你好，克里斯"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("你可以使用相同的技术来连接两个变量：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const one = "你好，";\nconst two = "请问最近如何？";\nconst joined = `${one}${two}`;\nconsole.log(joined); // "你好，请问最近如何？"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("像这样连接字符串被称为"),a("em",[s._v("串联")]),s._v("（concatenation）。")]),s._v(" "),a("p",[s._v("如果你不想使用模板字面量，只想使用普通字符串，")]),s._v(" "),a("p",[s._v("可以写")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const greeting = "你好";\nconst name = "克里斯";\nconsole.log(greeting + "，" + name); // "你好，克里斯"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("blockquote",[a("p",[s._v('用加号"+"尽情的连接吧！')])]),s._v(" "),a("p",[s._v("但是，模板字面量通常更具可读性：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const greeting = "你好";\nconst name = "克里斯";\nconsole.log(`${greeting}，${name}`); // "你好，克里斯"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("更复杂一点的模板字面量中可以包含js表达式：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const song = "青花瓷";\nconst score = 9;\nconst highestScore = 10;\nconst output = `我喜欢歌曲《${song}》。我给它打了 ${\n  (score / highestScore) * 100\n} 分。`;\nconsole.log(output); // "我喜欢歌曲《青花瓷》。我给它打了 90 分。"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("🎄当你想在字符串中输入双引号或者单引号的时候该怎么做呢？")]),s._v(" "),a("p",[s._v("输入双引号：")]),s._v(" "),a("blockquote",[a("p",[s._v("一种是换其他字符来声明字符串，之前说过字符串还可以用单引号和反引号声明")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const goodQuotes1 = \'She said "I think so!"\';\nconst goodQuotes2 = `She said "I\'m not going in there!"`;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])])]),s._v(" "),a("p",[s._v("输入单引号' ：")]),s._v(" "),a("blockquote",[a("p",[s._v("可以用转义字符，单引号'的转义字符是'")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const bigmouth = 'I\\'ve got no right to take my place…';\nconsole.log(bigmouth);\n//I've got no right to take my place…\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[s._v("#")]),s._v(" 数组")]),s._v(" "),a("h4",[s._v("数组的定义和简单使用")]),s._v(" "),a("p",[s._v("数组是包含了多个值的对象。")]),s._v(" "),a("p",[s._v("数组也是个对象，与其他对象的区别是我们可以单独访问列表中的每个值。")]),s._v(" "),a("p",[a("strong",[s._v("创建数组：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let shopping = ["bread", "milk", "cheese", "hummus", "noodles"];\nlet random = ["tree", 795, [0, 1, 2]];\t//混合项目\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("strong",[s._v("访问和修改数组元素：")])]),s._v(" "),a("p",[s._v("用方括号访问：")]),s._v(" "),a("p",[s._v("shopping[0];")]),s._v(" "),a("p",[s._v("数组中包含数组的话称之为多维数组。你可以通过将两组方括号链接在一起来访问数组内的另一个数组:")]),s._v(" "),a("p",[s._v("random[2] [2];")]),s._v(" "),a("p",[a("strong",[s._v("获取数组长度：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("sequence.length;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h4",[s._v("有趣的方法")]),s._v(" "),a("p",[a("strong",[s._v("spilt方法：用于分割字符串去存进数组中")])]),s._v(" "),a("img",{staticStyle:{zoom:"90%"},attrs:{src:"https://s1.imagehub.cc/images/2024/11/26/4e2cb40409e73abb05c92a16eb213a22.png",alt:"image 20240714160051406"}}),s._v(" "),a("p",[a("strong",[s._v("join方法与方法：把数组每个项组合起来存进字符串")])]),s._v(" "),a("img",{staticStyle:{zoom:"90%"},attrs:{src:"https://s1.imagehub.cc/images/2024/11/26/76371ccd6e49e7ababa24791e39b5b49.png",alt:"image 20240714160251500"}}),s._v(" "),a("h4",[s._v("添加和删除数组项")]),s._v(" "),a("p",[s._v("添加一个或多个要添加到数组末尾的元素"),a("code",[s._v("push()")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('myArray.push("Cardiff");\nmyArray;\nmyArray.push("Bradford", "Brighton");\nmyArray;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("从数组中删除最后一个元素的话直接使用 "),a("code",[s._v("pop()")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("myArray.pop();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("unshift()")]),s._v(" 和 "),a("code",[s._v("shift()")]),s._v(" 从功能上与"),a("code",[s._v("push()")]),s._v(" 和 "),a("code",[s._v("pop()")]),s._v("完全相同，只是它们分别作用于数组的开始，而不是结尾。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('myArray.unshift("Edinburgh");\t//unshift意思是平移\nmyArray;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let removedItem = myArray.shift();\nmyArray;\nremovedItem;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("p",[s._v("函数是可复用的代码块，要使用这个代码块呢，只需要一个简短的命令来调用。")]),s._v(" "),a("h4",[s._v("浏览器内置函数")]),s._v(" "),a("p",[s._v("太多咯，比如replace、join...")]),s._v(" "),a("h4",[s._v("自定义函数")]),s._v(" "),a("p",[s._v("function name(){")]),s._v(" "),a("p",[s._v("​\t//开始定义")]),s._v(" "),a("p",[s._v("}")]),s._v(" "),a("p",[s._v("name();\t//开始使用")]),s._v(" "),a("h4",[s._v("函数与方法")]),s._v(" "),a("p",[s._v("对象的成员的函数被称为"),a("strong",[s._v("方法")]),s._v("。")]),s._v(" "),a("p",[s._v("很多时候内置代码是同属于函数和方法的。比如string a.replace();")]),s._v(" "),a("p",[s._v("此时这个replace就是属于a对象的方法，但它也是内置函数哦、")]),s._v(" "),a("h4",[s._v("参数")]),s._v(" "),a("p",[s._v("常见一点的知识就不写了。")]),s._v(" "),a("p",[s._v("参数(parameter)我们也可以叫做属性(property)、argument、特性(attribute)。")]),s._v(" "),a("p",[s._v("有时候也可以设置默认参数")]),s._v(" "),a("p",[s._v("function hello（name）{\t\t};\t//指的是name是默认属性")]),s._v(" "),a("p",[s._v('function hello（name="克里斯"）{\t\t}；\t//指的是name是默认属性，克里斯是默认值')]),s._v(" "),a("h4",[s._v("匿名函数和默认值")]),s._v(" "),a("img",{staticStyle:{zoom:"80%"},attrs:{src:"https://s1.imagehub.cc/images/2024/11/26/4847b3727aa2b32473d34e2020f3736a.png",alt:"image 20240715234701986"}}),s._v(" "),a("h3",{attrs:{id:"箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数"}},[s._v("#")]),s._v(" 箭头函数")]),s._v(" "),a("p",[s._v("==(参数)=>{执行的内容}==")]),s._v(" "),a("p",[s._v("举例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('textBox.addEventListener("keydown", (event) => {\n  console.log(`You pressed "${event.key}".`);\n});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("如果函数只接受一个参数，可以省略参数周围的括号：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('textBox.addEventListener("keydown", event => {\n  console.log(`You pressed "${event.key}".`);\n});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("最后，如果函数只包含一行 "),a("code",[s._v("return")]),s._v(" 语句，也可以省略圆括号和 "),a("code",[s._v("return")]),s._v(" 关键字，隐式地返回表达式。在下面的示例中，我们使用 "),a("code",[s._v("Array")]),s._v(" 的 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("map()")]),a("OutboundLink")],1),s._v(" 方法将原始数组中的每个值加倍：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const doubled = originals.map(item => item * 2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"注意-声明"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意-声明"}},[s._v("#")]),s._v(" 注意(声明")]),s._v(" "),a("p",[s._v("在JavaScript中，函数的定义和声明有时候可以混淆，但它们实际上指的是同一件事情，只是表达方式有所不同。以下是它们的区别和使用场景：")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("函数声明 (Function Declaration)")]),s._v(":")]),s._v(" "),a("ul",[a("li",[s._v("使用 "),a("code",[s._v("function")]),s._v(" 关键字来定义函数。")]),s._v(" "),a("li",[s._v("==函数声明会被提升（hoisted）==，这意味着在执行代码之前就可以访问函数。")]),s._v(" "),a("li",[s._v("示例："),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("函数表达式 (Function Expression)")]),s._v(":")]),s._v(" "),a("ul",[a("li",[s._v("将函数赋值给变量，或者将函数作为匿名函数直接使用。")]),s._v(" "),a("li",[s._v("函数表达式不会被提升（==匿名函数也不会被提升==，匿名函数也可以当做函数表达式），只有在执行到达它们定义的位置时，才能访问到这些函数。")]),s._v(" "),a("li",[s._v("示例："),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])])]),s._v(" "),a("li",[s._v("或者使用匿名函数："),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])])])])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("箭头函数 (Arrow Function)")]),s._v(":")]),s._v(" "),a("ul",[a("li",[s._v("ES6引入的新特性，提供了一种更简洁的函数定义方式。")]),s._v(" "),a("li",[s._v("箭头函数有更短的语法，并且词法上绑定 "),a("code",[s._v("this")]),s._v("。")]),s._v(" "),a("li",[s._v("示例："),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("add")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])])])])]),s._v(" "),a("p",[a("strong",[s._v("总结")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("如果你希望函数在代码中任何地方都可以被调用（因为函数声明会被提升），可以使用函数声明。")]),s._v(" "),a("li",[s._v("如果你希望在一个表达式中定义函数（比如将函数赋值给变量），或者希望定义匿名函数，可以使用函数表达式。")]),s._v(" "),a("li",[s._v("如果你希望使用更现代的语法，尤其是在处理简单函数时，可以考虑使用箭头函数。")])]),s._v(" "),a("p",[s._v("在实际应用中，通常会根据具体的需求和代码风格来选择适合的方式来定义函数。")]),s._v(" "),a("h3",{attrs:{id:"注意-传参简化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意-传参简化"}},[s._v("#")]),s._v(" 注意(传参简化")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function logKey(event) {\n  console.log(`You pressed "${event.key}".`);\n}\n\ntextBox.addEventListener("keydown", logKey);\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("上面所有代码简化成以下，用匿名函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('textBox.addEventListener("keydown", function (event) {\n  console.log(`You pressed "${event.key}".`);\n} );\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("还可以进一步简化，用箭头函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('textBox.addEventListener("keydown", (event) => {\n  console.log(`You pressed "${event.key}".`);\n});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"调用知识"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调用知识"}},[s._v("#")]),s._v(" 调用知识")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("btn.onclick = displayMessage;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("btn绑定的是button，当button被点击的时候，函数就会被调用。")]),s._v(" "),a("p",[s._v("不过那可能会想为什么右边的函数没有加括号呢？这是因为一旦加上括号，就会立即被调用，管你此时有没有被点击呢")]),s._v(" "),a("p",[s._v("比如btn.onclick=displayMessage();")]),s._v(" "),a("p",[s._v("不过可以写"),a("strong",[s._v("匿名函数")]),s._v("。因为匿名函数并不会直接执行，前提是代码要在函数作用域内。")]),s._v(" "),a("p",[s._v("btn.onclick=function(){  }")]),s._v(" "),a("h2",{attrs:{id:"事件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件"}},[s._v("#")]),s._v(" 事件")]),s._v(" "),a("p",[s._v("事件是你正在编程的系统中发生的事情。（事件是在浏览器窗口内触发的）")]),s._v(" "),a("p",[s._v("事件产生，系统触发某种信号，并且触发一些可自选机制。")]),s._v(" "),a("blockquote",[a("p",[s._v("事件举例：")]),s._v(" "),a("p",[s._v("用户按下某个按键")]),s._v(" "),a("p",[s._v("用户悬停光标")]),s._v(" "),a("p",[s._v("网页结束加载")]),s._v(" "),a("p",[s._v("表单提交")]),s._v(" "),a("p",[s._v("视频的播放、暂停或结束")]),s._v(" "),a("p",[s._v("发生错误")])]),s._v(" "),a("h3",{attrs:{id:"事件处理器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件处理器"}},[s._v("#")]),s._v(" 事件处理器")]),s._v(" "),a("h4",[s._v("addEventListener()")]),s._v(" "),a("p",[s._v("addEventListener(“事件”，“调用函数”)")]),s._v(" "),a("p",[s._v("这里的事件可以是")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("focus")]),s._v(" 和 "),a("code",[s._v("blur")]),s._v("：当按钮被聚焦或失焦时，颜色会改变；尝试按下 tab 键来聚焦于按钮，再次按下该键来使按钮失去焦点。这些事件通常用于在聚焦时显示填入表单字段的信息，或者在表单字段填入不正确的值时显示错误信息。")]),s._v(" "),a("li",[a("code",[s._v("dblclick")]),s._v("：颜色只在按钮被双击时改变。")]),s._v(" "),a("li",[a("code",[s._v("mouseover")]),s._v("和 "),a("code",[s._v("mouseout")]),s._v("：当鼠标指针在按钮上悬停，或指针移出按钮时，颜色分别会改变。")])]),s._v(" "),a("h5",[s._v("移除监听器")]),s._v(" "),a("p",[s._v("方法一：使用"),a("code",[s._v("removeEventListener()")]),s._v("方法，负责删除事件处理器。内部两个参数，一个事件名，一个函数。")]),s._v(" "),a("p",[s._v("方法二：通过信号法删除。")]),s._v(" "),a("p",[s._v("大体是说先创建一个处理器对象。")]),s._v(" "),a("p",[s._v("然后在事件处理器内部，比如addEventListener内部添加一句话，这句话的意思是向该处理器传递信号。")]),s._v(" "),a("p",[s._v("然后在事件处理器外，调用处理器的中止功能。（abort是中止的意思）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const controller = new AbortController();\t//创建对象，controller叫做处理器\n\nbtn.addEventListener("click",\n  () => {\n    const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`;\n    document.body.style.backgroundColor = rndCol;\n  },\n{signal: controller.signal })  //在addEventListener内部 向该处理器传递 Signal;\n\n\ncontroller.abort();// 移除任何 所有与该控制器相关的事件处理器\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h5",[s._v("在单个事件上添加多个监听器")]),s._v(" "),a("p",[s._v("你可以为一个事件设置多个处理器")]),s._v(" "),a("p",[s._v('myElement.addEventListener("click",functionA);')]),s._v(" "),a("p",[s._v('myElement.addEventListener("click",functionB);')]),s._v(" "),a("p",[s._v("当点击按钮，这两个处理器函数都会运行")]),s._v(" "),a("h5",[s._v("其他事件监听器机制")]),s._v(" "),a("p",[s._v("除了addEventListener()监听事件，还有两种事件处理器方式。")]),s._v(" "),a("p",[a("strong",[s._v("一种是通过属性处理，一种是内联事件处理器")])]),s._v(" "),a("p",[s._v("事件处理器属性：我们常常选择按钮button作为触发事件的对象，这种可以触发事件的对象通常也有属性可以监控触发。比如button.onclick=()=>{ }；这个onclick属性就是监听点击的。也可以是button.onclick=change; 这个change函数在其他地方定义过。")]),s._v(" "),a("blockquote",[a("p",[s._v("不过上面我们提过可以给一个事件添加多个函数处理，但那只适用addEventListener()，并不适用事件属性处理器")]),s._v(" "),a("p",[s._v("比如element.onclick=func1;element.onclick=func2;")]),s._v(" "),a("p",[s._v("这里后面的函数只会覆盖掉前面的函数。")])]),s._v(" "),a("p",[s._v('内联事件处理器：指的是< button onclick="change()">Click me！< /button>')]),s._v(" "),a("p",[s._v("这样是完全不建议使用的，一是有各种隐患，二是维护不方便。比如你想统一修改触发change的控件，这样就得一个个修改。")]),s._v(" "),a("h3",{attrs:{id:"事件对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件对象"}},[s._v("#")]),s._v(" 事件对象")]),s._v(" "),a("p",[s._v("放在事件处理函数的"),a("strong",[s._v("参数")]),s._v("当中")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('btn.addEventListener("click", bgChange);\t//btn绑定的是button\n\nfunction bgChange(e) {\n  const rndCol = `rgb(${random(255)}, ${random(255)}, ${random(255)})`;\n  e.target.style.backgroundColor = rndCol;\n  console.log(e);\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("在上面的代码中，可以看到触发的函数传入的参数是e,其实这里传入"),a("code",[s._v("event")]),s._v(","),a("code",[s._v("evt")]),s._v(","),a("code",[s._v("e")]),s._v("都可以")]),s._v(" "),a("blockquote",[a("p",[s._v("以往我们常常会给bgChange传入函数运转需要的参数或者不提供，这里我们传入e。这里的e指的就是触发的")])]),s._v(" "),a("p",[s._v("这个东西叫"),a("strong",[s._v("事件对象")]),s._v("，它会自动传递给事件处理函数。")]),s._v(" "),a("blockquote",[a("p",[s._v("回到代码，e.target指的是控件本身（这里代码没有展示完毕，我们绑定的是button）")]),s._v(" "),a("p",[s._v("target是e的属性，负责对元素进行引用。所以这里改变颜色改变的是button的颜色，而不是html背景颜色。")])]),s._v(" "),a("p",[s._v("针对不同的事件，事件对象有时候有一些额外的属性。在上个代码中，事件对象具有target属性，这个是通用的。不过针对keydown事件，事件对象额外的属性就是key，告诉你哪个键被按下。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20240717231938606","data-src":"https://s1.imagehub.cc/images/2024/11/26/da73714ab48b1b02f53239001d354a88.png",loading:"lazy"}})]),s._v(" "),a("h3",{attrs:{id:"阻止默认行为"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻止默认行为"}},[s._v("#")]),s._v(" 阻止默认行为")]),s._v(" "),a("p",[s._v("有时你希望事件结束后不要立即执行默认行为。")]),s._v(" "),a("p",[s._v("比如用户提交表单，有时表单自己有一些简单的验证，但由于过于简单，很多信息筛错筛不出来，所以需要开发者自己写验证信息。")]),s._v(" "),a("p",[s._v("不过这不重要，重要的是用户有时会提交错误的信息，还按下了提交按钮，这时怎么阻止呢？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//以下是一个简单的例子\n\nform.addEventListener("submit", (e) => {\n  if (fname.value === "" || lastname.value === "") {\n    e.preventDefault();\n    para.textContent = "You need to fill in both names!";\n  }\n});\n指的是在form当中的提交触发时，如果当中的input有任一是空的，就触发以下事件。并且触发完毕我们还会告诉用户应该修改哪里。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("h2",{attrs:{id:"事件嵌套传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件嵌套传递"}},[s._v("#")]),s._v(" 事件嵌套传递")]),s._v(" "),a("h3",{attrs:{id:"事件冒泡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件冒泡"}},[s._v("#")]),s._v(" 事件冒泡")]),s._v(" "),a("p",[s._v("事件冒泡描述了浏览器如何针对嵌套元素的事件。")]),s._v(" "),a("p",[s._v("事件原理：当一个元素嵌套在父元素里，当你点击这个元素，同时也隐含的点击了它的父元素。（好比一个盒子里有巧克力，当你取巧克力，你不可避免的就碰到盒子）")]),s._v(" "),a("h5",[s._v("冒泡实例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('<body>\n  <div id="container">\n    <button>点我！</button>\n  </div>\n</body>\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("当你给div、button、body都绑上监听器，再来个处理函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function handleClick(e) {\n  output.textContent += `你在 ${e.currentTarget.tagName} 元素上进行了点击\\n`;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("会出现如下结果：")]),s._v(" "),a("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://s1.imagehub.cc/images/2024/11/26/76bdb0f4f6fbaffe183b45bf92eddbbb.png",alt:"image 20240721111913358"}}),s._v(" "),a("p",[s._v("这上面其实插入了一张空白图片，当你点击浅蓝色区域，会出现"),a("code",[s._v("你在 BUTTON 元素上进行了点击 你在 DIV 元素上进行了点击 你在 BODY 元素上进行了点击")])]),s._v(" "),a("p",[s._v("当你点击深蓝色区域，会出现"),a("code",[s._v("你在 DIV 元素上进行了点击 你在 BODY 元素上进行了点击")])]),s._v(" "),a("p",[s._v("当你点击白色区域，会出现"),a("code",[s._v("你在 BODY 元素上进行了点击")])]),s._v(" "),a("p",[s._v("在这种情况下：")]),s._v(" "),a("ul",[a("li",[s._v("最先触发按钮上的单击事件")]),s._v(" "),a("li",[s._v("然后是按钮的父元素（"),a("code",[s._v("<div>")]),s._v(" 元素）")]),s._v(" "),a("li",[s._v("然后是 "),a("code",[s._v("<div>")]),s._v(" 的父元素（"),a("code",[s._v("<body>")]),s._v(" 元素）")])]),s._v(" "),a("p",[s._v("==我们可以这样描述：事件从被点击的最里面的元素"),a("strong",[s._v("冒泡")]),s._v("而出。==")]),s._v(" "),a("h3",{attrs:{id:"阻止传递"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻止传递"}},[s._v("#")]),s._v(" 阻止传递")]),s._v(" "),a("p",[s._v("(指的是阻止事件冒泡传递)")]),s._v(" "),a("h5",[s._v("使用 stopPropagation() 修复问题")]),s._v(" "),a("p",[s._v("但不是所有时候我们点击元素都希望触发它的父元素的，有一个方法可以防止这些问题。"),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Event",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("Event")]),a("OutboundLink")],1),s._v(" 对象有一个可用的函数，叫做 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/Event/stopPropagation",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("stopPropagation()")]),a("OutboundLink")],1),s._v("，当在一个事件处理器中调用时，可以防止事件向任何其他元素传递。")]),s._v(" "),a("blockquote",[a("p",[s._v("首先要找出你想要阻止什么事件，然后在事件内部施加语句")])]),s._v(" "),a("p",[s._v("例如，")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('video.addEventListener("click", (event) => {\n  event.stopPropagation();\t//\n  video.play();\n});\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"事件冒泡应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件冒泡应用"}},[s._v("#")]),s._v(" 事件冒泡应用")]),s._v(" "),a("p",[s._v("事件冒泡可以实现"),a("strong",[s._v("事件委托")]),s._v("。")]),s._v(" "),a("p",[s._v("通俗来讲，一个父元素往往包含很多子元素，有时候监听器相同时，你不需要在每个子元素上安置监听器，只需要在父元素上安一个即可。因为子元素上的改变会传导到父元素上。")]),s._v(" "),a("h2",{attrs:{id:"event-target"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#event-target"}},[s._v("#")]),s._v(" event.target")]),s._v(" "),a("p",[s._v("我们使用 "),a("code",[s._v("event.target")]),s._v("来获取事件的目标元素（也就是最里面的元素）。")]),s._v(" "),a("p",[s._v("如果我们想访问处理这个事件的元素（在这个例子中是容器），我们可以使用"),a("code",[s._v("event.currentTarget")]),s._v("。")]),s._v(" "),a("p",[s._v("(不懂的结合MDN当前页面例子就懂了，这里只是mark一下)")]),s._v(" "),a("h2",{attrs:{id:"事件捕获"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件捕获"}},[s._v("#")]),s._v(" 事件捕获")]),s._v(" "),a("p",[s._v("它也是事件传递，但顺序与事件冒泡 相反。")]),s._v(" "),a("blockquote",[a("p",[s._v("事件冒泡是先在最内层的目标元素上发生，然后在逐层往父元素发生。")]),s._v(" "),a("p",[s._v("事件捕获在先在最外层父元素发生，再往内发生。")]),s._v(" "),a("p",[s._v("//")]),s._v(" "),a("p",[s._v("专业术语：")]),s._v(" "),a("p",[s._v("事件冒泡：先在最内层的目标元素上发生，然后在连续较少的嵌套元素上发生。")]),s._v(" "),a("p",[s._v("事件捕获：事件先在"),a("em",[s._v("最小嵌套")]),s._v("元素上发生，然后在连续更多的嵌套元素上发生，直到达到目标。")])]),s._v(" "),a("p",[a("strong",[s._v("事件捕获默认是禁用的，你需要在 "),a("code",[s._v("addEventListener()")]),s._v(" 的 "),a("code",[s._v("capture")]),s._v(" 选项中启用它。")])]),s._v(" "),a("blockquote",[a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('container.addEventListener("click", handleClick, { capture: true });\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])])]),s._v(" "),a("h2",{attrs:{id:"对象🦘"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象🦘"}},[s._v("#")]),s._v(" 对象🦘")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const objectName = {\n  member1Name: member1Value,\n  member2Name: member2Value,\n  member3Name: member3Value,\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("一个对象由许多的成员组成，每个成员都拥有一个名字和一个值。"),a("strong",[s._v("每一组名字/值必须由逗号分隔，并且名字和值要用冒号分隔。")])]),s._v(" "),a("blockquote",[a("p",[s._v("对象成员的值是任意的，比如可以是数字，数组也可以是函数。")]),s._v(" "),a("p",[s._v("对象成员值是数字、数组的时候我们叫做对象的"),a("strong",[s._v("属性")]),s._v("，也叫"),a("strong",[s._v("数据项")]),s._v("。")]),s._v(" "),a("p",[s._v("对象成员值是函数的时候，即对象对数据可以进行某些操作时，我们称为"),a("strong",[s._v("方法")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const person = {\n  name: ["Bob", "Smith"],\t//数据项\n  age: 32,\t\t\t\t\t//数据项\n  bio: function () {\t\t//方法\n    console.log(`${this.name[0]} ${this.name[1]} 现在 ${this.age} 岁了。`);\n  },\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这里的函数写法可能看起来有点奇怪，这的确不是我们最简单的写法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("bio(){\n\tconsole.log(...);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("==上面的被称为"),a("strong",[s._v("对象字面量")]),s._v("，手动的写出对象的内容来创建对象。==是我们自己手写创建的对象，而不是直接用模板生成的")])]),s._v(" "),a("h3",{attrs:{id:"点表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#点表示法"}},[s._v("#")]),s._v(" 点表示法")]),s._v(" "),a("p",[s._v("点表示法可以访问对象的属性和方法，对象的名字表现为一个"),a("strong",[s._v("命名空间")]),s._v("。")]),s._v(" "),a("p",[s._v("当你想要访问对象内部的属性和方法时，命名空间必须写在第一位。然后输入一个点，紧接着是你想要访问的目标。")]),s._v(" "),a("blockquote",[a("p",[s._v("这个目标可以是简单属性的名字，或者是数组属性的子元素")])]),s._v(" "),a("p",[s._v("person.age;")]),s._v(" "),a("p",[s._v("person.bio();")]),s._v(" "),a("p",[s._v("person.name[0];")]),s._v(" "),a("h5",[s._v("子命名空间")]),s._v(" "),a("p",[s._v("从")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const person = {\n  name: ["Bob", "Smith"],\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("改成")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const person = {\n  name: {\n    first: "Bob",\n    last: "Smith",\n  },\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("需要访问这些属性，只需要再一次用链式的点表示法。")]),s._v(" "),a("p",[s._v("person.name.first;")]),s._v(" "),a("h3",{attrs:{id:"括号表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#括号表示法"}},[s._v("#")]),s._v(" 括号表示法")]),s._v(" "),a("p",[s._v('person.age变成 person.["age"];')]),s._v(" "),a("p",[s._v('person.name.first变成 person["name"] ["first"]')]),s._v(" "),a("blockquote",[a("p",[s._v("之前我们访问name里的元素用的是person.name[0]，这看起来很像是在访问数组，我们这里也用到了方括号，看起来也像是数组。")]),s._v(" "),a("p",[s._v("区别在于，它是使用关联值的名称来访问，而不是使用索引。")]),s._v(" "),a("p",[s._v("这里我们称之为"),a("strong",[s._v("关联数组")]),s._v("，对象将字符串映射到值，而数组将数字映射到值。")])]),s._v(" "),a("p",[s._v("点表示法通常优于括号表示法，因为它更易读。但是当出现对象的属性名称是***变量***时，必须使用括号表示法。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const person = {\n  name: ["Bob", "Smith"],\n  age: 32,\n};\n\nfunction logProperty(propertyName) {\n  console.log(person[propertyName]);\t////括号表示法\n}\n\nlogProperty("name");\t\n// ["Bob", "Smith"]\nlogProperty("age");\n// 32\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("==在JavaScript中，使用括号表示法访问对象属性时，必须将属性名作为字符串传递，因此需要使用引号（单引号 "),a("code",[s._v("'")]),s._v(" 或双引号 "),a("code",[s._v('"')]),s._v("）来包围属性名。否则，JavaScript会将其解释为变量名，而不是属性名的字符串==")]),s._v(" "),a("p",[s._v("==但是如果是变量，用括号表示法访问时可以不加字符串，但是得保证变量内存储的值必须是字符串==")]),s._v(" "),a("h3",{attrs:{id:"设置对象成员"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置对象成员"}},[s._v("#")]),s._v(" 设置对象成员")]),s._v(" "),a("h4",[s._v("修改对象成员的值")]),s._v(" "),a("p",[s._v("person.age=45;")]),s._v(" "),a("p",[s._v('person["name"] ["last"]="CratChit";')]),s._v(" "),a("h4",[s._v("创建新的成员")]),s._v(" "),a("p",[s._v('person["eyes"]="hazel";')]),s._v(" "),a("p",[s._v("//创建新的函数")]),s._v(" "),a("p",[s._v('person.farewell=function(){console.log("再见");}')]),s._v(" "),a("h4",[s._v("设置对象成员")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const myDataName = nameInput.value;\nconst myDataValue = nameValue.value;\nperson[myDataName] = myDataValue;\n////应用\nconst myDataName = "height";\nconst myDataValue = "1.75m";\nperson[myDataName] = myDataValue;\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("h3",{attrs:{id:"this-的含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this-的含义"}},[s._v("#")]),s._v(" “this”的含义")]),s._v(" "),a("p",[s._v("之前我们用到过this")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const person={\n\tname:"Chris",\n\tintroduceSelf() {\n  \t\tconsole.log(`你好！我是 ${this.name[0]}。`);\n  \t}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("关键字 "),a("code",[s._v("this")]),s._v(" 指向了当前代码运行时的对象——这里指 "),a("code",[s._v("person")]),s._v(" 对象")]),s._v(" "),a("blockquote",[a("p",[s._v("为什么不直接写person呢？")]),s._v(" "),a("p",[s._v("假如说我们这里只有一个对象，那你写写person无碍，但是当你要创建多个对象时，那肯定不能把person写进函数里了，因为我们每个对象都想用你这个函数。")]),s._v(" "),a("p",[s._v("所以这就体现了this的作用，它可以让你对每一个创建的对象都采取相同的方法定义。")])]),s._v(" "),a("img",{staticStyle:{zoom:"67%"},attrs:{src:"https://s1.imagehub.cc/images/2024/11/26/32effd458449eb551da8066d9bca5221.png",alt:"image 20240723081728478"}}),s._v(" "),a("h3",{attrs:{id:"构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数"}},[s._v("#")]),s._v(" 构造函数")]),s._v(" "),a("p",[s._v("==只用==对象字面量在创建多个对象时是不够用的。")]),s._v(" "),a("p",[s._v("我们希望有这样一种方法，可以创建任意多个对象，只需要更新不同属性的值。")]),s._v(" "),a("blockquote",[a("p",[s._v("注：以下不是构造函数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function createPerson(name) {\n  const obj = {};\n  obj.name = name;\n  obj.introduceSelf = function () {\n    console.log(`你好！我是 ${this.name}。`);\n  };\n  return obj;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("每次调用 "),a("code",[s._v("createPerson()")]),s._v(" 函数时，它都会创建并返回一个新对象。该对象将具有两个成员：")]),s._v(" "),a("ul",[a("li",[s._v("一个 "),a("code",[s._v("name")]),s._v(" 属性")]),s._v(" "),a("li",[s._v("一个 "),a("code",[s._v("introduceSelf()")]),s._v(" 方法。")])]),s._v(" "),a("p",[s._v("现在我们可以创建任意多个对象，重用该定义：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const salva = createPerson("Salva");\t//==createPerson会返回一个obj，此时你把obj传给salva，即该==\nsalva.name;\nsalva.introduceSelf();\n// "你好！我是 Salva。"\n\nconst frankie = createPerson("Frankie");\nfrankie.name;\nfrankie.introduceSelf();\n// "你好！我是 Frankie。"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("blockquote",[a("p",[s._v("可以看到上面的salva和frankie的创建有点冗长了，我们需要新创建一个空对象，然后初始化它、返回它。")]),s._v(" "),a("p",[s._v("接下来我们使用构造函数。")])]),s._v(" "),a("p",[a("strong",[s._v("构造函数是使用new关键字调用的函数")])]),s._v(" "),a("p",[s._v("当你调用构造函数时，它将：")]),s._v(" "),a("ul",[a("li",[s._v("创建一个新对象")]),s._v(" "),a("li",[s._v("将 "),a("code",[s._v("this")]),s._v(" 绑定到新对象，以便你可以在构造函数代码中引用 "),a("code",[s._v("this")])]),s._v(" "),a("li",[s._v("运行构造函数中的代码")]),s._v(" "),a("li",[s._v("返回新对象")])]),s._v(" "),a("p",[s._v("让我们应用一下，首先重写示例。")]),s._v(" "),a("p",[s._v("function Person(name) {\nthis.name = name;\nthis.introduceSelf = function () {\nconsole.log("),a("code",[s._v("你好！我是 ${this.name}。")]),s._v(");\n};\n}")]),s._v(" "),a("p",[s._v("然后开始应用：")]),s._v(" "),a("p",[s._v('const salva = new Person("Salva");\nsalva.name;\nsalva.introduceSelf();\n// "你好！我是 Salva。"')]),s._v(" "),a("p",[s._v('const frankie = new Person("Frankie");\nfrankie.name;\nfrankie.introduceSelf();\n// "你好！我是 Frankie。"')]),s._v(" "),a("h2",{attrs:{id:"对象原型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象原型"}},[s._v("#")]),s._v(" 对象原型")]),s._v(" "),a("h3",{attrs:{id:"原型链"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链"}},[s._v("#")]),s._v(" 原型链")]),s._v(" "),a("p",[s._v("js中所有对象都有一个内置属性，叫做"),a("strong",[s._v("prototype(原型)")]),s._v("。")]),s._v(" "),a("p",[s._v("原型本身也是一个对象，所以这个对象也有自己的内置属性，故原型也会有自己的原型。这就构成了"),a("strong",[s._v("原型链")]),s._v("。")]),s._v(" "),a("p",[s._v("原型链止于 null作为其原型的对象。")]),s._v(" "),a("h4",[s._v("访问原型")]),s._v(" "),a("p",[s._v("访问对象原型的标准方法是Object.getPrototypeof( )；")]),s._v(" "),a("p",[s._v("当你试图访问一个对象的属性时，如果在对象本身找不到该属性，就会在原型链中搜索该属性，如果仍然找不到该属性，就会搜索原型的原型，以此类推，直到找到属性或者到达链的末端(返回undefined)。")]),s._v(" "),a("p",[s._v("所以，在调用 "),a("code",[s._v("myObject.toString()")]),s._v(" 时，浏览器做了这些事情：")]),s._v(" "),a("ul",[a("li",[s._v("在 "),a("code",[s._v("myObject")]),s._v(" 中寻找 "),a("code",[s._v("toString")]),s._v(" 属性")]),s._v(" "),a("li",[a("code",[s._v("myObject")]),s._v(" 中找不到 "),a("code",[s._v("toString")]),s._v(" 属性，故在 "),a("code",[s._v("myObject")]),s._v(" 的原型对象中寻找 "),a("code",[s._v("toString")])]),s._v(" "),a("li",[s._v("其原型对象拥有这个属性，然后调用它。")])]),s._v(" "),a("h4",[s._v("原型是什么")]),s._v(" "),a("p",[s._v("有个对象叫Object.prototype，它是最基础的原型（因为它指向null），所有对象都默认拥有它。")]),s._v(" "),a("blockquote",[a("p",[s._v("Object.prototype自身没有原型，它是原型链的终点。")])]),s._v(" "),a("p",[s._v("但是一个对象的原型并不一定总是Object.prototype，")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const myDate = new Date();\nlet object = myDate;\n\ndo {\n  object = Object.getPrototypeOf(object);\n  console.log(object);\n} while (object);\n\n// Date.prototype\n// Object { }\n// null\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("所以myDate的原型是Date.prototype对象，Date.prototype的原型是Object.prototype，Object.prototype的原型是null")]),s._v(" "),a("h3",{attrs:{id:"属性遮蔽"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性遮蔽"}},[s._v("#")]),s._v(" 属性遮蔽")]),s._v(" "),a("p",[s._v("指的是在对象中定义了一个属性，但是在对象的原型中定义了一个同名的属性。")]),s._v(" "),a("p",[s._v("可以看到在下面的第二句就有gapyear，可以知道gapyear是Date中的函数")]),s._v(" "),a("p",[s._v("但是在第三行我们在myDate中又定义了一个gapyear函数，此时你再调用gapyear调用的是myDate中的函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const myDate = new Date(1995, 11, 17);\n\nconsole.log(myDate.getYear()); // 95\n\nmyDate.getYear = function () {\n  console.log(\"别的东西！\");\n};\n\nmyDate.getYear(); // '别的东西！'\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("鉴于对原型链的描述，这应该是可以预测的。当我们调用 "),a("code",[s._v("getYear()")]),s._v(" 时，浏览器首先在 "),a("code",[s._v("myDate")]),s._v(" 中寻找具有该名称的属性，如果 "),a("code",[s._v("myDate")]),s._v(" 没有定义该属性，才检查原型。因此，当我们给 "),a("code",[s._v("myDate")]),s._v(" 添加 "),a("code",[s._v("getYear()")]),s._v(" 时，就会调用 "),a("code",[s._v("myDate")]),s._v(" 中的版本。")]),s._v(" "),a("p",[s._v("这叫做属性的“遮蔽”。")]),s._v(" "),a("h3",{attrs:{id:"js中的类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js中的类"}},[s._v("#")]),s._v(" js中的类")]),s._v(" "),a("h4",{attrs:{id:"类和构造函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类和构造函数"}},[s._v("#")]),s._v(" 类和构造函数")]),s._v(" "),a("p",[s._v("在 JavaScript 中，可以通过两种主要方式声明构造函数：一种是使用传统的函数声明，另一种是使用 ES6 引入的类语法。")]),s._v(" "),a("h3",[s._v(" 使用函数声明")]),s._v(" "),a("p",[s._v("传统上，JavaScript 使用函数声明来定义构造函数。构造函数名通常以大写字母开头，表示它是一个构造函数，需要使用 "),a("code",[s._v("new")]),s._v(" 关键字来实例化对象。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20241024194721353","data-src":"https://s1.imagehub.cc/images/2024/11/26/9db83d836b222394c26d36b24c0efef6.png",loading:"lazy"}})]),s._v(" "),a("h3",[s._v("使用 ES6 类语法")]),s._v(" "),a("p",[s._v("在 ES6 中，引入了 "),a("code",[s._v("class")]),s._v(" 关键字，使得定义类和构造函数更加简洁和直观。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20241024195107749","data-src":"https://s1.imagehub.cc/images/2024/11/26/c8e0a25f1bcd73622739fba1d8d4240a.png",loading:"lazy"}})]),s._v(" "),a("h2",{attrs:{id:"json"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#json"}},[s._v("#")]),s._v(" JSON")]),s._v(" "),a("p",[s._v("json是一种标准格式，用的是js语法，但是和js没有关系。")]),s._v(" "),a("p",[s._v("json里面就是由一堆数组、对象这样的东西构成。")]),s._v(" "),a("ul",[a("li",[s._v("JSON 是一种纯数据格式，它只包含属性，没有方法。")]),s._v(" "),a("li",[a("strong",[s._v("JSON 要求在字符串和属性名称周围使用双引号。单引号无效。")])]),s._v(" "),a("li",[s._v("JSON 实际上可以是任何可以有效包含在 JSON 中的数据类型的形式。比如，单个字符串或者数字就是有效的 JSON 对象。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const person = {\n  name: "John",\n  age: 30,\n  isStudent: false,\n  address: {\n    street: "123 Main St",\n    city: "New York",\n    zipcode: "10001"\n  },\n  phoneNumbers: ["123-456-7890", "987-654-3210"]\n};\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("一个是JSON格式的字符串")]),s._v(" "),a("p",[s._v('const jsonString = \'{"name": "Alice", "age": 25}\';')]),s._v(" "),a("p",[s._v("一个是JS风格的字符串")]),s._v(" "),a("p",[s._v('const jsonObject = {name: "Alice", age: 25};')]),s._v(" "),a("blockquote",[a("p",[s._v("JSON 格式中的 "),a("code",[s._v("{}")]),s._v(" 是对象结构，")]),s._v(" "),a("p",[s._v("但 JSON本质上是一个纯字符串， 所以整个内容必须以字符串的形式表示，因此需要用引号包裹。")])]),s._v(" "),a("h4",[s._v("两个常用函数")]),s._v(" "),a("p",[a("strong",[s._v("JSON.parse()：将JSON字符串解析为JS对象")])]),s._v(" "),a("p",[s._v('const jsonString = \'{"name": "Alice", "age": 25}\';\nconst jsonObject = JSON.parse(jsonString);\nconsole.log(jsonObject);  // 输出: {name: "Alice", age: 25}')]),s._v(" "),a("p",[a("strong",[s._v("JSON.stringify()：将JS对象序列化为JSON字符串")])]),s._v(" "),a("p",[s._v('const jsonObject = {name: "Alice", age: 25};\nconst jsonString = JSON.stringify(jsonObject);\nconsole.log(jsonString);  // 输出: \'{"name": "Alice", "age": 25}\'')]),s._v(" "),a("h2",{attrs:{id:"异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步"}},[s._v("#")]),s._v(" 异步")]),s._v(" "),a("p",[s._v("异步指的是有这样一种方式，可以让你的程序在执行一个长时间运行任务的同时可以去处理其他的事情，而不是在那里一味地等待程序的运行。")]),s._v(" "),a("p",[a("strong",[s._v("JavaScript的异步编程指的是在执行某些任务时，代码不会阻塞程序的执行，而是允许程序继续运行其他任务，并在异步操作完成后再处理结果。")])]),s._v(" "),a("p",[s._v("指的是")]),s._v(" "),a("blockquote",[a("p",[s._v("以下是一些可能会长时间运行的函数：")]),s._v(" "),a("ul",[a("li",[s._v("使用 "),a("code",[s._v("fetch()")]),s._v("发起 HTTP 请求")]),s._v(" "),a("li",[s._v("使用 "),a("code",[s._v("getUserMedia()")]),s._v(" 访问用户的摄像头和麦克风")]),s._v(" "),a("li",[s._v("使用 "),a("code",[s._v("showOpenFilePicker()")]),s._v("请求用户选择文件以供访问")])])]),s._v(" "),a("p",[s._v("先来观察什么样的函数是同步运行的")]),s._v(" "),a("p",[s._v('const name = "Miriam";\nconst greeting = '),a("code",[s._v("Hello, my name is ${name}!")]),s._v(';\nconsole.log(greeting);\n// "Hello, my name is Miriam!"')]),s._v(" "),a("p",[s._v("这里先定义一个名字和字符串，在调用函数的时候，先传进去name，然后才输出。")]),s._v(" "),a("p",[s._v("这样一行完了再下一行执行的就叫做"),a("strong",[s._v("同步程序")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"事件处理程序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件处理程序"}},[s._v("#")]),s._v(" 事件处理程序")]),s._v(" "),a("p",[s._v("之前我们学过事件处理程序，意思就是发生事件后的一些处理程序")]),s._v(" "),a("p",[s._v("不过要知道addEventListener不是事件处理程序，它有两个参数，第二个才是事件处理程序，它只是负责给事件添加事件处理程序的")]),s._v(" "),a("p",[s._v("那为什么说事件处理程序也是异步呢？")]),s._v(" "),a("p",[s._v("因为事件处理程序是在事件发生后才调用，而不是事件发生的同时被调用的")]),s._v(" "),a("p",[a("strong",[s._v("JavaScript的异步编程指的是在执行某些任务时，代码不会阻塞程序的执行，而是允许程序继续运行其他任务，并在异步操作完成后再处理结果。")])]),s._v(" "),a("p",[s._v("结合一下，事件处理程序放在那里但是不会立即执行，不会阻塞js其余的执行，而是在遇到特定事件才触发，触发完后返回结果。")]),s._v(" "),a("p",[s._v("事件处理程序在事件发生时被放入事件队列（event queue），等待事件循环处理。当主线程空闲时，事件循环会从事件队列中取出事件处理程序并执行它们。")]),s._v(" "),a("h1",{attrs:{id:"⭐"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#⭐"}},[s._v("#")]),s._v(" ⭐")]),s._v(" "),a("h2",{attrs:{id:"回调"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#回调"}},[s._v("#")]),s._v(" 回调")]),s._v(" "),a("p",[s._v("事件处理程序是一种特殊的回调函数。")]),s._v(" "),a("p",[s._v("回调函数就是说，把A函数传进B函数，并在适当的时候调用A函数。")]),s._v(" "),a("p",[s._v("有的时候可能在B执行的时候会立即调用A函数，有的时候B会等一会执行。")]),s._v(" "),a("p",[s._v("尽管回调函数通常是通过将一个函数作为参数传递给另一个函数来实现，但只要遵循将操作的控制权交给另一个函数这一核心概念，就可以有多种实现方式。")]),s._v(" "),a("blockquote",[a("p",[s._v("回调函数遵从先传进去一个函数，并在合适的时候再调用这个函数。")])]),s._v(" "),a("p",[s._v("==**回调与异步的关系：**回调是我们传进去一个函数，这个函数不需要立即执行。而你的事件处理程序也不需要立即执行，只是等事件发生了再执行事件处理程序，执行完毕我们会返回执行的结果==")]),s._v(" "),a("p",[s._v("同步回调是在主函数执行过程中立即调用的回调函数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function greet(name, callback) {\n    console.log('Hello ' + name);\n    callback();\n}\n\nfunction sayGoodbye() {\n    console.log('Goodbye!');\n}\n\ngreet('Alice', sayGoodbye);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("最后一行调用greet，传入name和函数，由于consolelog忽略不计，基本可以当saygoodbye一传进去就执行了，所以是同步回调")]),s._v(" "),a("p",[a("strong",[s._v("异步回调")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function fetchData(callback) {\n    setTimeout(function() {\n        console.log('Data fetched');\n        callback('Data');\n    }, 2000);\n}\n\nfunction processData(data) {\n    console.log('Processing: ' + data);\n}\n\nfetchData(processData);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("这里的processData等了一会儿才执行的")]),s._v(" "),a("p",[a("strong",[s._v("回调例子")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("document.getElementById('myButton').addEventListener('click', function() {\n    console.log('Button clicked!');\n});\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这里的function() {console.log('Button clicked!');}就是回调函数。当按钮被点击，回调函数被调用")]),s._v(" "),a("p",[a("strong",[s._v("回调地狱")])]),s._v(" "),a("p",[s._v("拿上面举例，指的是function() {}里面还调用了其他函数，这个其他函数里还调用函数。这就是回调地狱。我们利用promises解决。")]),s._v(" "),a("h2",{attrs:{id:"易搞混总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#易搞混总结"}},[s._v("#")]),s._v(" 易搞混总结")]),s._v(" "),a("h2",{attrs:{id:"promise"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise"}},[s._v("#")]),s._v(" promise")]),s._v(" "),a("p",[a("strong",[s._v("Promise")]),s._v(" 是现代 JavaScript 中异步编程的基础。它是一个"),a("strong",[s._v("由异步函数返回的对象")]),s._v("，可以指示操作当前所处的状态。在 Promise 返回给调用者的时候，操作往往还没有完成，但 Promise 对象提供了方法来处理操作最终的成功或失败。")]),s._v(" "),a("blockquote",[a("p",[s._v("首先想想异步是什么，你可以这么想象，现在有一支士兵队伍在浩浩荡荡的行进，在途中碰到了一个村庄，士兵长让其中一个士兵A去村庄拿些药物来，然后其他士兵继续行进。A取药并不影响其他士兵向前行进。这就是异步，我认为这个A可以当做异步函数，因为1.他确实与其他人步调不一致2.他并不影响其他程序执行3.他取药的结果会反馈到主程序")]),s._v(" "),a("p",[s._v("但是在取药的途中，可能会发生一些事情，比如A发现村庄里的药正在制作，工期比预计的长很多，他想把这个执行过程中的事情告诉长官，所以他可以派一个村民C去反馈取药的途中的一些状态，这个C就是异步函数A返回的对象，它是负责反馈异步函数中途的一些结果。")])]),s._v(" "),a("p",[s._v("在上一篇文章中，我们谈到使用回调实现异步函数的方法。在这种设计中，我们需要在调用异步函数的同时传入回调函数。这个异步函数会立即返回，并在操作完成后调用传入的回调。")]),s._v(" "),a("blockquote",[a("p",[s._v("这个回调函数我们也试着理解一下，程序在执行，浩浩荡荡地向下执行，遇到一个事件，但是程序不想因为事件的发生阻塞程序的执行。")]),s._v(" "),a("p",[s._v("document.getElementById('Button').addEventListener('click', function() {console.log('Button clicked!'); });")]),s._v(" "),a("p",[s._v("拿上面这个举例子，程序遇到了点击事件，那么点击事件后要执行一个function函数，但是程序不想等function执行完返回结果之后才继续执行")]),s._v(" "),a("p",[s._v("比如if(发生click){执行function()}")]),s._v(" "),a("p",[s._v("上面这样不行，所以程序决定把function()交给别人处理得了，它自己执行。")]),s._v(" "),a("p",[s._v("一旦你把function()传入别的函数，被传入函数的那个函数就叫异步函数。比如addEventListener()。function()叫做回调函数。")]),s._v(" "),a("p",[s._v("现在我们用一个addEventListener来处理“事件处理程序”（function()），addEventListener执行完一切后会把结果告诉主程序。")])]),s._v(" "),a("p",[s._v("在基于 Promise 的 API 中，异步函数会启动操作并返回一个 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise",target:"_blank",rel:"noopener noreferrer"}},[a("code",[s._v("Promise")]),a("OutboundLink")],1),s._v(" 对象。然后，你可以将处理函数附加到 Promise 对象上，当操作完成时（成功或失败），这些处理函数将被执行。")]),s._v(" "),a("blockquote",[a("p",[s._v("OK，现在那个村民C是promise，村民C作为promise对象，告诉长官这个药还有很久才能做完，长官说知道了，C就返回了。不过在现实中，promise对象是有一个处理函数，可以处理操作完成后成功或者失败的结果。当操作成功或者失败，这个处理函数就会执行。")])]),s._v(" "),a("h2",{attrs:{id:"异步wangdoc"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步wangdoc"}},[s._v("#")]),s._v(" 异步wangdoc")]),s._v(" "),a("h3",{attrs:{id:"单线程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#单线程模型"}},[s._v("#")]),s._v(" 单线程模型")]),s._v(" "),a("p",[s._v("JS上只有一个线程，一个线程只能运行一个脚本（运行的这个叫主线程）（其他线程搁后台待着吧")]),s._v(" "),a("p",[s._v("JS设计之初就只想要有一个线程，因为多线程还涉及线程之间的交互设置，所以JS压根就没想让你多线程。但是有时候会有一个很漫长的函数，总不能卡在那里等着吧（这叫假死）")]),s._v(" "),a("p",[s._v("所以设计了这样一种模式，把这种任务先挂起来不管，先继续执行后面的代码，等挂着的任务返回一个结果（不是执行完毕的结果，而是IO结果，请求结果）再把这个挂着的任务放到主线程继续执行。")]),s._v(" "),a("h3",{attrs:{id:"同步、异步任务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同步、异步任务"}},[s._v("#")]),s._v(" 同步、异步任务")]),s._v(" "),a("p",[s._v("同步任务是说没有被引擎挂起，放在主线程中排队执行的任务。只有前一个任务完成，才能执行后一个任务。")]),s._v(" "),a("p",[s._v("异步任务是说被引擎挂在一边，不进入主线程、而进入任务队列的任务。只有主线程的执行栈空了，才会利用回调函数把任务队列中的异步任务放到主线程执行。")]),s._v(" "),a("p",[a("strong",[s._v("异步")]),s._v('：异步任务不进入主线程、而进入**"任务队列"**（task queue）的任务，只有"任务队列"通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。')]),s._v(" "),a("p",[s._v("使用异步的场景：")]),s._v(" "),a("p",[s._v("（1）定时任务，setTimeout，setInterval")]),s._v(" "),a("p",[s._v("（2）网络请求： ajax请求，动态加载")]),s._v(" "),a("p",[s._v("（3）事件绑定，点击等交互事件")]),s._v(" "),a("h4",[s._v("简陋的机制描述")]),s._v(" "),a("p",[s._v("执行栈（调用栈）\t\tEvent queue")]),s._v(" "),a("blockquote",[a("p",[s._v("左边是位于主线程的执行栈，右边是一个事件队列。")]),s._v(" "),a("p",[s._v("执行栈空的时候，会从事件队列中取东西出来执行。")])]),s._v(" "),a("h4",[s._v("事件监听机制")]),s._v(" "),a("p",[s._v("我们拿常用的这个函数解释一下为什么它涉及到异步任务以及内部运行的逻辑。")]),s._v(" "),a("p",[s._v("document.getElementById('myButton').addEventListener('click',( )=>{ console.log(\"ok\");});")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("事件监听器的注册")]),s._v(" "),a("ul",[a("li",[s._v("首先代码通过getElementById"),a("em",[s._v("获取到这个DOM元素")]),s._v("，也就是按钮，其次通过addEventListener"),a("em",[s._v("注册一个监听器")]),s._v("。")]),s._v(" "),a("li",[s._v('并且将回调函数( )=>{ console.log("ok"); 作为'),a("em",[s._v("参数传递")]),s._v(" 给addEventListener方法")])])]),s._v(" "),a("li",[a("p",[s._v("事件监听器的内部机制")]),s._v(" "),a("ul",[a("li",[s._v("当代码解析到你这一行，也就是addEventListener方法被调用，浏览器会在后台将时间监听器注册到按钮的点击事件中。（此时并没有执行回调函数，只是设置一个监听器）")])])]),s._v(" "),a("li",[a("p",[s._v("事件触发")]),s._v(" "),a("ul",[a("li",[s._v("当用户点击按钮，事件被触发。浏览器检测到点击事件，会将事件及相关信息放到任务队列。（事件队列）")])])]),s._v(" "),a("li",[a("p",[s._v("事件循环机制")]),s._v(" "),a("ul",[a("li",[s._v("这个机制以后会讲，就当做一个检查机制，它会帮你检查执行栈有没有空，空了就帮你把任务队列的事件放进去（我们现在addEventlistener的事件就放在任务队列中，排队ing")])])]),s._v(" "),a("li",[a("p",[s._v("执行")]),s._v(" "),a("p",[s._v("执行栈空了，任务队列也排到你了，好了，事件循环机制会把回调函数推到栈中执行，执行完毕。")])])]),s._v(" "),a("h3",[s._v("任务队列")]),s._v(" "),a("p",[s._v("我们知道我们会有一个正在运行的主线程，引擎还提供一个任务队列，放置的是需要程序处理的各种异步任务。")]),s._v(" "),a("p",[s._v("（根据异步任务的类型，实际上存在多个任务队列，但是一般为了方便理解，我们假设只有一个任务队列）")]),s._v(" "),a("p",[s._v("我们的主线程会去一直执行同步任务，一旦同步任务执行完，就去看看任务队列里的异步任务，如果满足条件，异步任务就进入主线程开始执行，这时“异步任务”就变成同步任务了。执行完，再去任务列表找下一个异步任务。一旦任务队列清空，程序就结束执行。")]),s._v(" "),a("blockquote",[a("p",[s._v("我们的异步任务在准备进入主线程的时候，需要用到回调函数。为什么？你想想回调函数里面是什么？它毕竟也是个函数，函数里面就是方法，所以函数里面写的就是你该干什么，拿addeventlistener举例，这里的回调函数就是说在发生某个事件后我要执行什么。这个要执行什么就是调回主线程的关键，因为如果你没有要继续执行的东西，把你调到主线程有什么用呢？又不知道要干什么。所以"),a("strong",[s._v("一个异步任务没有回调函数，就不会进入任务队列")])])]),s._v(" "),a("h3",{attrs:{id:"事件循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件循环"}},[s._v("#")]),s._v(" 事件循环")]),s._v(" "),a("p",[s._v("我们先来模拟代码执行的过程，当用到事件循环时，我会加粗显示。")]),s._v(" "),a("p",[s._v("浏览器遇到代码开始执行~同步代码~好~直接执行，异步代码？（比如"),a("code",[s._v("setTimeout")]),s._v(" 或 AJAX 请求），引擎将其发送到Web API，API处理完异步之后，将回调函数添加到任务队列。")]),s._v(" "),a("p",[s._v("紧接着"),a("strong",[s._v("事件循环机制")]),s._v("不断地检查调用栈，如果"),a("em",[s._v("调用栈")]),s._v("是空的，就再检查"),a("em",[s._v("任务队列")]),s._v("。如果任务队列不为空，事件循环会取出队列中的第一个回调函数，将其添加到调用栈，并执行它。此过程不断重复，确保异步回调函数最终得到执行。")]),s._v(" "),a("p",[s._v("总之事件循环就是往返于调用栈和任务队列。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log('Start');\n\nsetTimeout(() => {\n    console.log('Timeout callback');\n}, 1);\n\nconsole.log('End');\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("浏览器先来执行console.log，打印出Start，")]),s._v(" "),a("p",[s._v("然后遇见定时器，"),a("u",[s._v("发送到API")]),s._v("，")]),s._v(" "),a("p",[s._v("继续执行console.log end，")]),s._v(" "),a("p",[s._v("API反馈回来（1s到期了），把settimeout的回调函数"),a("u",[s._v("放到任务队列")]),s._v("，")]),s._v(" "),a("p",[s._v("事件循环检查执行栈空了，从任务队列中取出settimeout的回调函数并执行console.log('Timeout callback')")]),s._v(" "),a("h3",{attrs:{id:"异步操作的实现方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异步操作的实现方式"}},[s._v("#")]),s._v(" 异步操作的实现方式")]),s._v(" "),a("p",[s._v("我觉得可以理解为异步操作的应用~")]),s._v(" "),a("h5",[s._v("回调函数")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f1() {\n  // ...\n}\n\nfunction f2() {\n  // ...\n}\n\nf1();\nf2();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("这个代码我们的意图是f1完毕，执行f2~")]),s._v(" "),a("p",[s._v("但是如果f1是回调函数，那现在只能是f2先执行，再执行f1~")]),s._v(" "),a("p",[s._v("那如何保证f1是回调的情况下还是先执行f1呢~")]),s._v(" "),a("blockquote",[a("p",[s._v("当然是把f2也写成回调函数~~")]),s._v(" "),a("p",[s._v("f1(f2)")])]),s._v(" "),a("p",[s._v("但是呢~上面这种写法很容易造成f1(f2(f3(f4)))~叫做耦合，一层调一层，是不是看着就复杂~")]),s._v(" "),a("h5",[s._v("事件监听")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("f1.on('done', f2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这句是jquery的写法~意思是f1发生done事件，就触发f2（不用去管done是什么，只要知道是个事件就好啦）")]),s._v(" "),a("p",[s._v("那么怎么触发done事件呢？如下，我们简单写个情况")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f1() {\n  setTimeout(function () {\n    // ...\n    f1.trigger('done');\n  }, 1000);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("这样我们也完成了异步的处理，1000ms后就触发done，done就触发f2")]),s._v(" "),a("p",[s._v("虽然和上个例子一样，也是一层触发一层，不过看着简单了一点，而且这个done是事件，可以触发好多个函数，不像上个例子，一个任务只能触发一个函数")]),s._v(" "),a("p",[s._v("但是这样写仍然是有缺点的，因为是任务触发，所以运行流程是很不清晰的")]),s._v(" "),a("p",[s._v("阅读代码很难看出一个主流程")]),s._v(" "),a("h5",[s._v("发布/订阅")]),s._v(" "),a("p",[s._v("指的是存在这样一个任务中心，你完成一个啥 你往任务中心发送 “发布” 信号")]),s._v(" "),a("p",[s._v("这样别人就可以向任务中心发送“订阅“信号")]),s._v(" "),a("p",[s._v("不过为了保证你一发布就有人订阅，常常是需要订阅人提前告诉任务中心，”喂，如果有人发布这个什么什么信号，一出现我就要订阅“")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jQuery.subscribe('done', f2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("很明显jquery写法，首先f2订阅done信号")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function f1() {\n  setTimeout(function () {\n    // ...\n    jQuery.publish('done');\n  }, 1000);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("然后f1发布done信号")]),s._v(" "),a("p",[s._v("(f1执行完成就发布这个信号，然后f2就会立刻订阅信号，然后执行f2自己的内容)")]),s._v(" "),a("p",[s._v("f2执行完成后，可以取消订阅")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("jQuery.unsubscribe('done', f2);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这种方法的性质与“事件监听”类似，但是明显优于后者。因为可以通过查看“消息中心”，了解存在多少信号、每个信号有多少订阅者，从而监控程序的运行。")]),s._v(" "),a("h2",{attrs:{id:"定时器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定时器"}},[s._v("#")]),s._v(" 定时器")]),s._v(" "),a("p",[s._v("原理："),a("code",[s._v("setTimeout")]),s._v("和"),a("code",[s._v("setInterval")]),s._v("的运行意思大概是，等待一段时间后再执行这个函数，区别是是否重复执行。但是这些由于本身就是回调函数，本身就待在任务队列中，所以不能够保证时间到了，事件循环也能立即把他们从任务队列拉出来执行，只能说等待同步任务执行结束。")]),s._v(" "),a("p",[a("strong",[a("code",[s._v("setTimeout")]),s._v("和"),a("code",[s._v("setInterval")]),s._v("的运行机制，是将指定的代码移出本轮事件循环，等到下一轮事件循环，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就继续等待。")])]),s._v(" "),a("h3",{attrs:{id:"settimeout"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#settimeout"}},[s._v("#")]),s._v(" setTimeout()")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var timerId = setTimeout(func|code, delay);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("setTimeout函数用来指定一段代码在多少毫秒之后执行，它返回一个整数，表示定时器的编号（这个定时器可以根据编号取消，取消的意思就是不等了，直接执行）")]),s._v(" "),a("p",[s._v("上面代码中，"),a("code",[s._v("setTimeout")]),s._v("函数接受两个参数，第一个参数"),a("code",[s._v("func|code")]),s._v("是将要推迟执行的函数名或者一段代码，第二个参数"),a("code",[s._v("delay")]),s._v("是推迟执行的毫秒数。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("举例一\nsetTimeout('console.log(2)',1000);\n举例二\nsetTimeout(f,1000);\t//这个f指的是函数名，函数在某个地方定义过\n举例三\nsetTimeout(f);\t//第二个参数如果不写，就默认为0\n举例四\nsetTimeout(function (a,b) {\n  console.log(a + b);\n}, 1000, 1, 1);\t//上面代码中，一共有四个参数，第一个参数是推迟执行的函数，第二个是定时器，第三个和第四个是1000ms后，推迟执行的函数（回调函数）的参数）\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("//特殊情况")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var x = 1;\n\nvar obj = {\n  x: 2,\n  y: function () {\n    console.log(this.x);\n  }\n};\n\nsetTimeout(obj.y, 1000)\n// 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("先看最后一行，我们传入了对象obj的方法，也就是obj内部的函数，但是这时obj.y内部的this已经不指向obj了，已经指向全局了")]),s._v(" "),a("p",[s._v("具体来说，当你把对象的方法作为参数传递时，这个方法会丧失其原始对象的上下文绑定，"),a("strong",[s._v("变成")]),s._v("一个"),a("strong",[s._v("独立的函数")]),s._v("。此时，函数的 "),a("code",[s._v("this")]),s._v(" 关键字不会再指向原始对象，而是默认指向全局对象（在浏览器中是 "),a("code",[s._v("window")]),s._v("）或 "),a("code",[s._v("undefined")]),s._v("（严格模式下）。")]),s._v(" "),a("h3",{attrs:{id:"setinterval"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setinterval"}},[s._v("#")]),s._v(" setInterval()")]),s._v(" "),a("p",[a("code",[s._v("setInterval")]),s._v("函数的用法与"),a("code",[s._v("setTimeout")]),s._v("完全一致，区别仅仅在于"),a("code",[s._v("setInterval")]),s._v("指定某个任务每隔一段时间就执行一次，也就是无限次的定时执行。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var i = 1\nvar timer = setInterval(function() {\n  console.log(2);\n}, 1000)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("上面代码中，每隔1000毫秒就输出一个2，会无限运行下去，直到关闭当前窗口。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var div = document.getElementById('someDiv');\nvar opacity = 1;\nvar fader = setInterval(function() {\n  opacity -= 0.1;\n  if (opacity >= 0) {\n    div.style.opacity = opacity;\n  } else {\n    clearInterval(fader);\n  }\n}, 100);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("上面代码每隔100毫秒，设置一次"),a("code",[s._v("div")]),s._v("元素的透明度，直至其完全透明为止。")]),s._v(" "),a("blockquote",[a("p",[s._v("不过这个函数有个细节，就是假设你现在设置每隔1000ms执行，但是任务需要执行100ms，根据函数的设计，实际上过去900ms就开始执行任务了。因为这个1000ms是包含中间空余的时间和执行任务的时间。")]),s._v(" "),a("p",[s._v("如果你想修订这个设计，可以这么写")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var i = 1;\nvar timer = setTimeout(function f() {\n  timer = setTimeout(f, 2000);\n  timer = setTimeout(f, 2000);\n  timer = setTimeout(f, 2000);\n  // ...\n}, 2000);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("跟着我的思路~首先我们是等待2000ms后开始执行function f(){}，先执行第一句，等待2000ms执行f，再等待2000ms执行f...")]),s._v(" "),a("p",[s._v("这样写的好处就是确保下一次执行总是在本次执行结束的2000ms开始。")])]),s._v(" "),a("h3",[s._v("解答疑问")]),s._v(" "),a("h4",[s._v("什么样的任务会被认为是异步任务")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("setTimeout")]),s._v(" 和 "),a("code",[s._v("setInterval")]),s._v(" 创建的定时器任务。")]),s._v(" "),a("p",[s._v("网络请求，例如通过 "),a("code",[s._v("XMLHttpRequest")]),s._v(" 或 "),a("code",[s._v("fetch")]),s._v(" 发起的请求。")]),s._v(" "),a("p",[s._v("文件和数据库 I/O 操作。")]),s._v(" "),a("p",[s._v("用户交互事件处理函数。")]),s._v(" "),a("p",[s._v("使用 "),a("code",[s._v("Promise")]),s._v(" 和 "),a("code",[s._v("async/await")]),s._v(" 处理的任务。")]),s._v(" "),a("p",[s._v("放入微任务队列的任务，例如 Promise 回调和 MutationObserver 回调。")]),s._v(" "),a("p",[s._v("Web Workers 等其他异步 API。")]),s._v(" "),a("p",[a("strong",[s._v("这些任务在执行时不会阻塞主线程，而是通过事件循环机制安排在未来某个时刻执行。")])]),s._v(" "),a("h2",{attrs:{id:"promise-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-2"}},[s._v("#")]),s._v(" promise")]),s._v(" "),a("p",[s._v("这里用的是MDN的写法。狗日的王道写的内谁能看得懂，我又不是写博士论文。")]),s._v(" "),a("p",[a("strong",[s._v("Promise")]),s._v(" 是现代 JavaScript 中异步编程的基础。它是一个由异步函数返回的对象，可以指示操作当前所处的状态。在 Promise 返回给调用者的时候，操作往往还没有完成，但 Promise 对象提供了方法来处理操作最终的成功或失败。")]),s._v(" "),a("blockquote",[a("p",[s._v("现在你的主线程正在运行，now~遇见一个异步函数，OK，我们让它先去运行着，你可以让这个异步函数先返回一个值，这个值叫做promise（promise是个对象），这个值它并不代表最终的结果，不过它的意思叫“承诺”，它会告诉代码，你需要我做的事情等异步函数结束我就会执行的！")])]),s._v(" "),a("p",[a("strong",[s._v("举例：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const fetchPromise = fetch(\n  "https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json",\n);\n\nconsole.log(fetchPromise);\n\nfetchPromise.then((response) => {\n  console.log(`已收到响应：${response.status}`);\n});\n\nconsole.log("已发送请求……");\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("fetch会返回一个promise对象，我们把对象赋值给fetchpromise变量")]),s._v(" "),a("p",[s._v("输出该变量，输出结果应该是这样："),a("code",[s._v('Promise { <state>: "pending" }')]),s._v('。（意思是fetchpromise是一个Promise对象，它有一个state属性，值是“pending"。pending的意思其实是操作正在进行中）')]),s._v(" "),a("p",[s._v("调用Promise对象的then方法，表示如果操作成功，就执行then（respond代表服务器响应的对象）")]),s._v(" "),a("p",[s._v("完整的结果：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Promise { <state>: "pending" }\n已发送请求……\n已收到响应：200\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"链式使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#链式使用"}},[s._v("#")]),s._v(" 链式使用")]),s._v(" "),a("p",[s._v("拿上文举例，我们在收到response后想获得JSON格式的数据里面的东西。首先我们需要收到response后把数据转化成JSON格式，然后再调取JSON格式内的东西。")]),s._v(" "),a("p",[s._v("但由于转化成JSON格式也是一个异步函数，所以我们这里需要好几个函数的链式使用。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const fetchPromise = fetch(\n  "https://mdn.github.io/learning-area/javascript/apis/fetching-data/can-store/products.json",\n);\n\nfetchPromise\n  .then((response) => response.json())\n  .then((data) => {\n    console.log(data[0].name);\n  });\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("//具体的代码含义一会儿理解 这些只是引子 现在让我们开始正式的学院派教学吧~")]),s._v(" "),a("h3",{attrs:{id:"概述-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概述-2"}},[s._v("#")]),s._v(" 概述")]),s._v(" "),a("p",[s._v("首先需要知道，"),a("strong",[s._v("所有的异步任务都返回一个Promise实例")])]),s._v(" "),a("p",[s._v("Promise既是一个对象，也是一个构造函数。")]),s._v(" "),a("p",[s._v("对象是指promise可以由异步任务返回一个对象，也拥有自己的属性、方法。")]),s._v(" "),a("p",[s._v("构造函数是指对象可以用Promise new指令创建出来 var p1=new Promise(f1);\t//f1是异步函数")]),s._v(" "),a("h3",{attrs:{id:"promise对象状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise对象状态"}},[s._v("#")]),s._v(" Promise对象状态")]),s._v(" "),a("p",[s._v("Promise 对象通过自身的状态，来控制异步操作。Promise 实例具有三种状态。")]),s._v(" "),a("ul",[a("li",[s._v("异步操作未完成（pending）")]),s._v(" "),a("li",[s._v("异步操作成功/完成（fulfilled）")]),s._v(" "),a("li",[s._v("异步操作失败（rejected）")])]),s._v(" "),a("blockquote",[a("p",[s._v("有时我们用"),a("strong",[s._v("已敲定")]),s._v("（settled）这个词来同时表示"),a("strong",[s._v("已兑现")]),s._v("（fulfilled）和"),a("strong",[s._v("已拒绝")]),s._v("（rejected）两种情况。")])]),s._v(" "),a("p",[s._v("如果一个 Promise 已敲定，或者如果它被“锁定”以跟随另一个 Promise 的状态，那么它就是"),a("strong",[s._v("已解决")]),s._v("（"),a("strong",[s._v("resolved")]),s._v("）的。")]),s._v(" "),a("p",[s._v("resolved 是指 Promise 已经有了最终的状态（要么是 fulfilled 要么是 rejected），但这只是描述性的术语，而不是规范中的状态码。")]),s._v(" "),a("h3",{attrs:{id:"promise-状态转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#promise-状态转换"}},[s._v("#")]),s._v(" Promise 状态转换")]),s._v(" "),a("blockquote",[a("p",[s._v("注意，这里的“成功”或“失败”的含义取决于所使用的 API：例如，"),a("code",[s._v("fetch()")]),s._v(" 认为服务器返回一个错误（如 "),a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status/404",target:"_blank",rel:"noopener noreferrer"}},[s._v("404 Not Found"),a("OutboundLink")],1),s._v("）时请求成功，但如果网络错误阻止请求被发送，则认为请求失败。")])]),s._v(" "),a("blockquote",[a("p",[s._v("这三种的状态的变化途径只有两种。")]),s._v(" "),a("ul",[a("li",[s._v("从“未完成”到“成功”")]),s._v(" "),a("li",[s._v("从“未完成”到“失败”")])]),s._v(" "),a("p",[s._v("一旦状态发生变化，就凝固了，不会再有新的状态变化。这也是 Promise 这个名字的由来，它的英语意思是“承诺”，一旦承诺成效，就不得再改变了。这也意味着，Promise 实例的状态变化只可能发生一次。")]),s._v(" "),a("p",[s._v("因此，Promise 的最终结果只有两种。")]),s._v(" "),a("ul",[a("li",[s._v("异步操作成功，Promise 实例传回一个值（value），状态变为"),a("code",[s._v("fulfilled")]),s._v("。")]),s._v(" "),a("li",[s._v("异步操作失败，Promise 实例抛出一个错误（error），状态变为"),a("code",[s._v("rejected")]),s._v("。")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" promise "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("try")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("someOperation")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 假设这是一个可能抛出错误的操作")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("catch")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\npromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"操作失败:"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("上面是一个Promise构造函数，构造函数的创建实例的时候就能立刻执行。此时这个构造函数的参数是一个函数，这个执行函数接受两个参数，")]),s._v(" "),a("p",[a("strong",[s._v("resolve")]),s._v(": 用于将 Promise 从“待定”（pending）状态变为“已完成”（fulfilled）状态，并传递一个值(data)作为成功的结果。")]),s._v(" "),a("p",[a("strong",[s._v("reject")]),s._v(": 用于将 Promise 从“待定”（pending）状态变为“已拒绝”（rejected）状态，并传递一个原因(error)（通常是错误对象）作为失败的原因。")]),s._v(" "),a("blockquote",[a("p",[s._v("下面是应用，第一个函数用于改变实例的状态，第二个函数用于接收状态做出决定（then负责接收fulfilled状态，catch负责接收）")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" promise "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Promise")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("resolve"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" success "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("success"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("resolve")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"操作成功"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//resolve接收一个data数据，用于传递给以后要处理data的函数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("reject")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v('"操作失败"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//reject接受一个error数据，也可以叫reson数据，就是失败原因，以后也会传递给要处理error的函数")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\npromise"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("then")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("value")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// 输出 "操作成功"')]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("catch")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("error"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])])])}),[],!1,null,null,null);a.default=n.exports}}]);