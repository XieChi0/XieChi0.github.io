(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{428:function(s,a,n){"use strict";n.r(a);var t=n(7),e=Object(t.a)({},(function(){var s=this,a=s._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"🦃acwing基础语法算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#🦃acwing基础语法算法"}},[s._v("#")]),s._v(" 🦃acwing基础语法算法")]),s._v(" "),a("h2",{attrs:{id:"杂"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#杂"}},[s._v("#")]),s._v(" 杂")]),s._v(" "),a("h3",{attrs:{id:"double转int"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#double转int"}},[s._v("#")]),s._v(" double转int")]),s._v(" "),a("p",[s._v("double a = 2.34234;")]),s._v(" "),a("p",[s._v("int b = (int)a;\t//不仅前面要加int，记得在等号右边也加int")]),s._v(" "),a("h3",{attrs:{id:"double-100精度丢失"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#double-100精度丢失"}},[s._v("#")]),s._v(" double*100精度丢失")]),s._v(" "),a("p",[s._v("**问题描述：**double a=0.33*100;\tint b = a;")]),s._v(" "),a("p",[s._v("cout<<a;  //33")]),s._v(" "),a("p",[s._v("cout<<b;  //32")]),s._v(" "),a("p",[s._v("这是因为double在乘100时会有点精度丢失")]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("解决方法：")])]),s._v(" "),a("p",[s._v("cout<<round(b)；")]),s._v(" "),a("p",[s._v("或者int b = round(a*100);")]),s._v(" "),a("p",[s._v("cout<<b;")])]),s._v(" "),a("p",[a("strong",[s._v("补充：")])]),s._v(" "),a("p",[s._v("round是负责四舍五入的函数。它的库是#include<math.h>")]),s._v(" "),a("h3",{attrs:{id:"int转double"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#int转double"}},[s._v("#")]),s._v(" int转double")]),s._v(" "),a("p",[s._v("int s1=25,s2=50;")]),s._v(" "),a("p",[s._v("cout<<s1/s2;\t//0")]),s._v(" "),a("p",[s._v("如果想得到0.25，且不能修改s1 s2int类型")]),s._v(" "),a("blockquote",[a("p",[s._v("double c =(double)s1/(double)s2;")])]),s._v(" "),a("p",[s._v("如果想得到25%呢？")]),s._v(" "),a("p",[s._v("double c = (double)s1/(double)s2*100;")]),s._v(" "),a("p",[s._v('cout<<fixed<<setprecision(2)<<c<<"% "<<endl;')]),s._v(" "),a("h3",{attrs:{id:"两个浮点数的比较-精确版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#两个浮点数的比较-精确版"}},[s._v("#")]),s._v(" 两个浮点数的比较（精确版）")]),s._v(" "),a("p",[s._v("之前不是说浮点数总有数据丢失吗？")]),s._v(" "),a("p",[s._v("所以想要比较可以用以下方式")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const double eps = le-6;\t//用科学计数法表示的，是一个很小很小很小的数字\n    if(fabs(a-b)<=eps) cout<<"相等";\t//fabs是取绝对值，专用于浮点数的，可以看笔记本子有\n\tif(a+eps<b) cout<<"小于";\n\tif(a+eps>b) cout<<"大于";\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"分离整数与小数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分离整数与小数"}},[s._v("#")]),s._v(" 分离整数与小数")]),s._v(" "),a("p",[s._v("**问题解决：**double num = 453.23;")]),s._v(" "),a("p",[s._v("int A = floor(num);\t//A=453;")]),s._v(" "),a("p",[s._v("double a = num-A;\t//a是0.23")]),s._v(" "),a("p",[a("strong",[s._v("补充：")])]),s._v(" "),a("p",[s._v("floor的库也是<math.h>，作用是返回不大于num的最大整数，比如6.7会返回6")]),s._v(" "),a("p",[s._v("如果需要将0.23转化成整数，不要直接给a*100，会有数据丢失，可以参考上个问题，用int b = round(a✖100)；")]),s._v(" "),a("h3",{attrs:{id:"约数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#约数"}},[s._v("#")]),s._v(" 约数")]),s._v(" "),a("p",[s._v("比如一个题是给你一个数字，让你找出所有约数。（除了自身）")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230713183824004","data-src":"https://s1.imagehub.cc/images/2024/11/24/963be7d54697b4e79d98bd60618c66a8.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("这样看似简单，但是若是a是八位数，你就要从1开始加的很慢。一定超时。")]),s._v(" "),a("p",[s._v("所以需要优化，优化的思路是比如100/2=50.")]),s._v(" "),a("p",[s._v("那么我们需要把2和50都算在因子里。")]),s._v(" "),a("p",[s._v("我们的循环i并不会进行到50，而是50的平方根。")]),s._v(" "),a("h3",{attrs:{id:"switch-case"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#switch-case"}},[s._v("#")]),s._v(" switch case")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("\tchar a; \n        switch(a){\n            case 'C':\n                i=0;break;\t\t\t//1️⃣\n            case 'R':\n                i=1;break;\t\t\t//2️⃣\n            case 'F':\n                i=2;break;\t\t\t//3️⃣\n            //default: 语句\t\t//default指如果上面case都不满足 执行这个\n        }\n\n \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("ul",[a("li",[s._v("switch可以接收的数据类型*int ，String ，char")]),s._v(" "),a("li",[s._v("一定不要忘了在每句加case")]),s._v(" "),a("li",[s._v("关于"),a("strong",[s._v("break")]),s._v(" "),a("ul",[a("li",[s._v("在case'C'加break，指只执行1️⃣语句，不会执行23语句。但是如果你想让它接着执行后面的语句可以不加break。")]),s._v(" "),a("li",[s._v("default后面可以不加break，因为default是最后一句了，反正执行完就退出了，不存在退不出的情况，"),a("strong",[s._v("因为switch不是循环语句，而是选择语句")])])])])]),s._v(" "),a("h3",{attrs:{id:"_2的一百次方"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2的一百次方"}},[s._v("#")]),s._v(" 2的一百次方")]),s._v(" "),a("p",[s._v("我写到onenote里了 见A1 因为可以记录语音")]),s._v(" "),a("p",[s._v("如果是让100个2相乘，数字保存不了那么多位，但是可以用数组操作")]),s._v(" "),a("p",[s._v("写了挺久的 onenote有语音讲解")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#include<bits/stdc++.h>\nusing namespace std;\nint main(){\n    int N;\t//2的N次方\n    cin>>N;\n    int A[300];\n    A[0]=2;\n    int t=0,c=0;\n    int m=1;    //记位数\n    if(N==0)cout<<"1";\n    else if(N==1)cout<<"2";\n    else{\n        N=N-1;\n        while(N--){\n          t=0;\n          for(int i=0;i<m;i++){\n              c = A[i]*2+t;\n              A[i] = c%10;\n              t=c/10;\n          }\n          if(t)A[m++]=t;\n        }\n        \n        for(int q=m-1;q>=0;q--){\n            cout<<A[q];\n        }\n    }\n    return 0;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("h3",{attrs:{id:"四个数字中最大-小的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四个数字中最大-小的"}},[s._v("#")]),s._v(" 四个数字中最大/小的")]),s._v(" "),a("p",[s._v("min (  min(a,b) , min(c,d)  )")]),s._v(" "),a("h3",{attrs:{id:"平方矩阵1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平方矩阵1"}},[s._v("#")]),s._v(" 平方矩阵1")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230718175334121","data-src":"https://s1.imagehub.cc/images/2024/11/24/d18e0631c9ef2cc9ea3291107eace235.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("输出这样的数字，规律是选上下左右四个边里最下的，i j从1开始（不是数组，不要代入数组思考）")]),s._v(" "),a("p",[s._v("a是a阶数组的意思")]),s._v(" "),a("p",[s._v("up=i,   down=a-i+1,   left=j,   right=a-j+1")]),s._v(" "),a("p",[s._v("选用四个数中最小的(用上个标题的)")]),s._v(" "),a("h3",{attrs:{id:"平方矩阵2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#平方矩阵2"}},[s._v("#")]),s._v(" 平方矩阵2")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230718175704070","data-src":"https://s1.imagehub.cc/images/2024/11/24/6e7b41bef2b0daa4fe151f33e3dddfcf.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("这个矩阵的规律是")]),s._v(" "),a("p",[s._v("i,j都从1开始，行-列的绝对值+1")]),s._v(" "),a("p",[s._v("用到abs")]),s._v(" "),a("h3",{attrs:{id:"pow类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pow类型转换"}},[s._v("#")]),s._v(" pow类型转换")]),s._v(" "),a("p",[s._v("pow比如想输出8位数的倒是也可以，pow(2,15)")]),s._v(" "),a("p",[s._v("但是会用科学计数法表示，如果想让它完整的表述出来")]),s._v(" "),a("p",[s._v("可以用 （long）pow（2，15）")]),s._v(" "),a("p",[s._v("或者（long long）pow（2，15）")]),s._v(" "),a("h3",{attrs:{id:"二维数组初始化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二维数组初始化"}},[s._v("#")]),s._v(" 二维数组初始化")]),s._v(" "),a("p",[s._v("在main外面声明二维数组会自动全部填为0；")]),s._v(" "),a("p",[s._v("在main里面声明是不确定是否填充的。")]),s._v(" "),a("h3",{attrs:{id:"蛇形数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#蛇形数组"}},[s._v("#")]),s._v(" 蛇形数组")]),s._v(" "),a("p",[s._v("用OBS录屏了 在副屏录的")]),s._v(" "),a("p",[s._v("结果没录上 只有声音")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230718193513578","data-src":"https://s1.imagehub.cc/images/2024/11/24/3a5c1865d17f8a53811bb88330ebc368.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("这个是onenote的笔记")]),s._v(" "),a("h3",{attrs:{id:"while-cin-a-a"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#while-cin-a-a"}},[s._v("#")]),s._v(" while(cin>>a,a)")]),s._v(" "),a("p",[s._v("这句话的意思是题目同时在筛选两个条件，cin在输入a，并且a也不等于0")]),s._v(" "),a("h3",{attrs:{id:"递归"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归"}},[s._v("#")]),s._v(" 递归")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int fact(int n){\n    if(n==1) return 1;\n    return n*fact(n-1);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230728103617224","data-src":"https://s1.imagehub.cc/images/2024/11/24/974b791a05ce73a7ca69265b1b32197d.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("在旁边写上返回值是个不错的选择。")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230728120055347","data-src":"https://s1.imagehub.cc/images/2024/11/24/f71200cb5fde88e228aad7b0db31ee38.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("也可以采取这种写法")]),s._v(" "),a("h3",{attrs:{id:"递归构造"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#递归构造"}},[s._v("#")]),s._v(" 递归构造")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"Snipaste 2024 11 24 14 32 56","data-src":"https://s1.imagehub.cc/images/2024/11/24/a8e9d40566ae2e6aae18b5c722f021c7.png",loading:"lazy"}})]),s._v(" "),a("p",[s._v("先画成树的结构，然后思考"),a("strong",[s._v("变量")]),s._v(" 也就是函数的参数")]),s._v(" "),a("p",[s._v("然后思考"),a("strong",[s._v("什么时候终止")]),s._v("，比如这里就是到5终止")]),s._v(" "),a("p",[s._v("这个函数不用看的很仔细，因为要结合语境理解")]),s._v(" "),a("p",[s._v("然后思考函数可能的递进方式，比如这里有两种递进方式，f(k+1)  f(k+2)")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("递归不一定要返回一个值\n  void fact(int n){\n    \n    if(n==k){count++;return;}\n    else if(n<k){\n        fact(n+1);\n        fact(n+2);\n    }\n    else{return;}\n}\n//像这里n==k时return了，n>k时，return了\n//return即你好歹要让函数有个结束的时候，才能返回到下一层\n\n但是这样写就是不对的\n    void fact(int n){   \n    if(n==k){count++;return;}\n        fact(n+1);\n        fact(n+2);\n    }\n}\n\n//我个人理解是包裹封闭性不太好\n//比如这个是阶乘的函数 包裹性就不错\n//int fact(int n){\n//    if(n==1)return 1;\n//    return n*fact(n-1);\n//}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br")])]),a("h3",{attrs:{id:"数组形参"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组形参"}},[s._v("#")]),s._v(" 数组形参")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230728112506171","data-src":"https://s1.imagehub.cc/images/2024/11/24/f2de63c0c0bdaeec7727878b526e40c2.png",loading:"lazy"}})]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230728114953682","data-src":"https://s1.imagehub.cc/images/2024/11/24/e7638b1b453c8d812c88231499b670e4.png",loading:"lazy"}})]),s._v(" "),a("h3",{attrs:{id:"数组去重"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组去重"}},[s._v("#")]),s._v(" 数组去重")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include <bits/stdc++.h>\nusing namespace std;\nint b[1001],t=0;\nint get_unique_count(int a[], int n)\n{\n    ///////////////////////////////下面是重点\n    for(int i=1;i<=n;i++)\n    {\n        if(b[a[i]]==0){ \n            t++;\n            b[a[i]]++;\n        }\n    }\n    return t;\n}\n///////////////////////////////////上面是重点\nint main()\n{\n  int n;\n  cin>>n;\n  int a[n+1];\n  for(int i=1;i<=n;i++)\t\t//直接从1输入也不错\n  {\n      cin>>a[i];\n  }\n  cout<<get_unique_count(a,n);\n  return 0;\n}\n\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("h2",{attrs:{id:"库"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#库"}},[s._v("#")]),s._v(" 库")]),s._v(" "),a("h3",{attrs:{id:"cstdio"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cstdio"}},[s._v("#")]),s._v(" cstdio<>")]),s._v(" "),a("p",[a("code",[s._v("<cstdio>")])]),s._v(" "),a("p",[s._v("更适合C++宝宝体质的"),a("code",[s._v("<stdio.h>")]),s._v("  （C语言库里的）")]),s._v(" "),a("p",[s._v("要在C++里用printf可以使用")]),s._v(" "),a("h2",{attrs:{id:"类-结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类-结构体"}},[s._v("#")]),s._v(" 类 结构体")]),s._v(" "),a("p",[a("strong",[s._v("类与结构体的定义：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("class Preson{\n  private:\n  public:\n};\t\t//类的大括号外面 一定记得加分号\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("private和public里面可以写一些变量或者函数的声明。但是public和private这两句并不是一定要加的，如果你不给变量去描写他们是属于public还是private，会默认成为private。")]),s._v(" "),a("p",[s._v("Public和private的区别在于 public的变量在类里面定义，但是还可以在外面继续使用，但是private的变量就只可以在类里面去使用。")]),s._v(" "),a("p",[s._v("与之相对的，结构体中不特定加以private或者public的变量定义会默认public。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("struct{\n    private:\n    public:\n}Person;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[a("strong",[s._v("使用举例：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("#include<bits/stdc++.h>\nusing namespace std;\n\nclass Person{\n  private:\n    int age,height;\n    double money;\n  public:\n    string name;\n    void say(){\n        cout<<\"I'm \"<<name<<endl;\n    }\n    int get_age(){\n        return age;\n    }\n};\n\nint main(){\n    Person.say(uro);\t\t//I'm uro\n    person.age={22};//✖ 报错\n    return 0;\n}\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br")])]),a("p",[a("strong",[s._v("初始化：")])]),s._v(" "),a("p",[s._v("结构体和类在使用构造函数初始化是一样一样的，以下我用结构体举例")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("struct Person(){\n    int age,height;\n    double money;\t//默认public\n    Person(int _age,int _height,double _money){//构造函数\n        age=_age;\n        height=_height;\n        money=_money;\n        \n    private:\n        string name;\n    }\n};\nint main(){\n    Person p(18,180,20);\n    Person a(18,180);//错误的，你自己把构造函数写了三个参数就要传入三个参数\n    Person p();\t//错误的应该传入三个参数，因为你自己写的构造函数里面是这么写的 修改见下面\n    return 0;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("struct Person(){\n    int age,height;\n    double money;\t//默认public\n    Person(int _age,int _height,double _money){//构造函数\n        age=_age;\n        height=_height;\n        money=_money;\n    }\n    /*\n        Person(){}\t\t//这个里面可以允许你一个参数都不传，像倒数第3行一样。\n    */\n    \n};\nint main(){\n    Person p(18,180,20);\n    Person a(18,180);//错误的，你自己把构造函数写了三个参数就要传入三个参数\n    Person p();\t\n    return 0;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[a("strong",[s._v("第二种初始化：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("int main(){\n    Person p={18,180,100};\n    //或者是Person p={18,180};\t没有赋值的会被默认初始化为0\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("h3",{attrs:{id:"reverse"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#reverse"}},[s._v("#")]),s._v(" reverse()")]),s._v(" "),a("p",[s._v("头文件#include < algorithm >")]),s._v(" "),a("p",[s._v("reverse(a, a+n);"),a("em",[s._v("//n为数组中的元素个数")])]),s._v(" "),a("p",[s._v("//注意 这个a不是起始位置的意思")]),s._v(" "),a("blockquote",[a("p",[s._v("还可以翻转字符串、向量")]),s._v(" "),a("p",[s._v("https://blog.csdn.net/YMWM_/article/details/115468297")])]),s._v(" "),a("blockquote",[a("p",[s._v("应用：")]),s._v(" "),a("p",[s._v("给你一个数组，例如12345，翻转一次，51234，翻转两次45123，翻转三次34512")]),s._v(" "),a("p",[s._v("如何用巧妙的做法呢？")]),s._v(" "),a("p",[s._v("（以下这种做法的好处是数组不用移动里面的元素）")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230714154423611","data-src":"https://s1.imagehub.cc/images/2024/11/24/5886795549c0c852b9eda5d9476eb8fa.png",loading:"lazy"}})]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230714154436655","data-src":"https://s1.imagehub.cc/images/2024/11/24/b6ddd40d5e41e3660dacdc0b804612d3.png",loading:"lazy"}})])]),s._v(" "),a("h2",{attrs:{id:"字符串篇-string是不可修改的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串篇-string是不可修改的"}},[s._v("#")]),s._v(" 字符串篇（string是不可修改的）")]),s._v(" "),a("h3",{attrs:{id:"细节"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#细节"}},[s._v("#")]),s._v(" 细节")]),s._v(" "),a("p",[s._v("char数组的个数是用strlen(char a);")]),s._v(" "),a("p",[s._v("string的个数是用str.size();")]),s._v(" "),a("p",[s._v("这两函数都是返回一个int")]),s._v(" "),a("p",[a("strong",[s._v("在使用它们的长度的时候，最好是用另一个Int去保存数据，因为这些函数返回的值并不完全是int，而是一种无符号数，在比较的时候容易出错。所以记得用另一个int去保存数据")])]),s._v(" "),a("h3",{attrs:{id:"比对"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比对"}},[s._v("#")]),s._v(" 比对")]),s._v(" "),a("p",[s._v('string a = "jkaa";')]),s._v(" "),a("p",[s._v('if(a=="jkaa"){....}')]),s._v(" "),a("h3",{attrs:{id:"字符串修改"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串修改"}},[s._v("#")]),s._v(" 字符串修改")]),s._v(" "),a("p",[s._v('string ss="astabc";')]),s._v(" "),a("p",[s._v('ss=ss+"c";\t//ss为astabcc')]),s._v(" "),a("p",[s._v("还有一种修改方式")]),s._v(" "),a("p",[s._v("string a[2];\t//输入abc,def")]),s._v(" "),a("p",[s._v("此时a[0]是abc，a[1]是def")]),s._v(" "),a("blockquote",[a("p",[s._v("如果想要获得b，")]),s._v(" "),a("p",[s._v("string cc = a[[0]][[][2];")]),s._v(" "),a("p",[s._v("现在cc就是b；")])]),s._v(" "),a("blockquote",[a("p",[s._v("如果想要获得be，")]),s._v(" "),a("p",[s._v("cc = a[[0]][[][2];")]),s._v(" "),a("p",[s._v("cc=cc+a[[1]][[][2];")])]),s._v(" "),a("h3",{attrs:{id:"给每个输入的字符串加空格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#给每个输入的字符串加空格"}},[s._v("#")]),s._v(" 给每个输入的字符串加空格")]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230719230152292","data-src":"https://s1.imagehub.cc/images/2024/11/24/e8a3bff40b7e4465622bc4747e90d89f.png",loading:"lazy"}})]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('#include<iostream>\n#include<cstring>\nusing namespace std;\nint main(){\n    string A;\n    getline(cin,A);\n    for(int i=0;i<A.size()-1;i++){\n        cout<<A[i]<<" ";\n    }\n    cout<<A[A.size()-1]<<endl;\n    return 0;\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"只出现一次的字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#只出现一次的字符"}},[s._v("#")]),s._v(" 只出现一次的字符")]),s._v(" "),a("p",[s._v("给你一串小写字母组成的字符串，让你判断里面有没有字符只出现了一次。想想看用什么函数")]),s._v(" "),a("p",[s._v("用find，但不完全是。判断函数是这样的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("for(int i=0;i<a.size();i++){\n    if ( a.find(a[i])==a.rfind(a[i]) ){cout<<a[i]<<endl;break;}\n    //指的是从左边开始找该字符的出现位置 与 从右边找该字符的出现位置是一样的\n    //rfind是指从最后一个开始找\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("h3",{attrs:{id:"把字符全变大写或者小写"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#把字符全变大写或者小写"}},[s._v("#")]),s._v(" 把字符全变大写或者小写")]),s._v(" "),a("p",[s._v("这个可能有函数，但我觉得也许不必增加多余的工作，可以小暴力破解一下。")]),s._v(" "),a("p",[s._v("大写字母A到Z的ASCII是65-90")]),s._v(" "),a("p",[s._v("小写字母a到z的ASCII是97-122")]),s._v(" "),a("p",[s._v("所以大写变小写加上32")]),s._v(" "),a("p",[s._v("小写变大写减去32")]),s._v(" "),a("p",[s._v("for(int i=0;i<s.size();i++){")]),s._v(" "),a("p",[s._v("​\ts[i]=s[i]+32;")]),s._v(" "),a("p",[s._v("}//错啦错啦 如果本来有小写字母，那你加上32不是乱套了，应该判定它本来是大写字母才能加的")]),s._v(" "),a("p",[s._v("for(int i=0;i<s.size();i++){")]),s._v(" "),a("p",[s._v("​\tif (s[i]>='A'&&s[i]<='Z') s[i]=s[i]+32;")]),s._v(" "),a("p",[s._v("}\t//用'A'而不是用ASCII65，是防止记不住，这样用更方便")]),s._v(" "),a("h3",{attrs:{id:"字符串综合题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串综合题"}},[s._v("#")]),s._v(" 字符串综合题")]),s._v(" "),a("p",[a("code",[s._v("https://www.acwing.com/problem/content/778/")])]),s._v(" "),a("h3",{attrs:{id:"表示空格"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表示空格"}},[s._v("#")]),s._v(" 表示空格")]),s._v(" "),a("p",[s._v("可以看到字符串初始化要用“双引号“来初始化，但是在比较是否等于0时，是要用'单引号'来比较。")]),s._v(" "),a("blockquote",[a("p",[s._v('但是这样初始化其实也不完全正确，这样初始化并不是初始化了一个空白的字符。而是初始化了一个空白的空格，等于说你的res在输出的时候你输出的字符天然就带有一个空格，所以完全的初始化应该是res="";')])]),s._v(" "),a("p",[a("img",{staticClass:"lazy",attrs:{alt:"image 20230730153602864","data-src":"https://s1.imagehub.cc/images/2024/11/24/69b07839f372b128aa571bb9c51fee2f.png",loading:"lazy"}})])])}),[],!1,null,null,null);a.default=e.exports}}]);